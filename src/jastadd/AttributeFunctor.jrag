import static lang.ast.Constructors.*;

aspect AttributeFunctor {
	syn boolean Functor.isAttribute() {
		return getFunc().getFUNC_ID().equals("attr");
	}

	syn boolean Functor.isDecl() {
		return getFunc().getFUNC_ID().equals("decl");
	}

	syn boolean Functor.isType() {
		return getFunc().getFUNC_ID().equals("type");
	}

	syn boolean Functor.isGeneric() {
		return getFunc().getFUNC_ID().equals("generic");
	}

	syn boolean Expr.isASTFunctor() = false;
	eq Functor.isASTFunctor() =
		isAttribute() || isDecl() || isType() || isGeneric();
	eq InternalFunctor.isASTFunctor() = false;

	syn int Functor.expectedArity() {
		switch (getFunc().getFUNC_ID()) {
		case "decl":
		case "type":
		case "generic":
		case "to_number":
			return 1;
		case "add":
		case "mul":
		case "sub":
		case "div":
		case "mod":
		case "cat":
		case "attr":
			return 2;
		default:
			// return -1 to mark unknown functors
			return -1;
		}
	}

	syn boolean CommonLiteral.containsASTFunctor() = false;
	eq Constraint.containsASTFunctor() {
		for (Expr e : getExprs())
			if (e.isASTFunctor())
				return true;
		return false;
	}

	syn boolean Rule.containsASTFunctor() {
		for (CommonLiteral l : getBodys())
			if (l.containsASTFunctor())
				return true;
		return false;
	}

	// rewrite Rule {
	// 	when (enclosingAnalyzeBlock() != null &&
	// 		  containsASTFunctor()) to Rule {
	// 		int freshVarCount = 0;
	// 		AnalyzeContext ctx = enclosingAnalyzeBlock().getContext();

	// 		List<CommonLiteral> head = new List();
	// 		List<CommonLiteral> body = new List();

	// 		for (CommonLiteral l : getHeadss()) {
	// 			head.add(l.treeCopy());
	// 		}

	// 		for (CommonLiteral l : getBodys()) {
	// 			if (l.containsASTFunctor()) {
	// 				BINDLiteral bind = (BINDLiteral) l;
	// 				Variable v = (Variable) bind.getDst();
	// 				Functor f = (Functor) bind.getSrc();

	// 				body.add(BIND(v.treeCopy(), new InternalFunctor(f.getFunc().treeCopy(), f.getArgList().treeCopy())));
	// 				head.add(literal(ctx.progRelName, "$_v0_" + freshVarCount,
	// 								 "$_v1_" + freshVarCount,
	// 								 "$_v2_" + freshVarCount,
	// 								 "$_v3_" + freshVarCount,
	// 								 "$_v4_" + freshVarCount));
	// 				body.add(new InternalLiteral(new Opt(), new PredicateSymbol("_ASTSubtree"),
	// 											 new List<Term>().add(v.treeCopy())
	// 											 .add(new Variable("_v0_" + freshVarCount))
	// 											 .add(new Variable("_v1_" + freshVarCount))
	// 											 .add(new Variable("_v2_" + freshVarCount))
	// 											 .add(new Variable("_v3_" + freshVarCount))
	// 											 .add(new Variable("_v4_" + freshVarCount))));
	// 			} else {
	// 				body.add(l.treeCopy());
	// 			}
	// 		}
	// 		return new Rule(head, body);
	// 	}
	// }
}
