import static lang.ast.Constructors.*;

aspect Functor {
  syn int Functor.expectedArity() {
    Optional<FunctorInfo> fi = FunctorInfo.fromName(getFunc().getFUNC_ID());
    if (fi.isPresent()) {
      return fi.get().arity();
    }
    return -1;
  }

  public enum FunctorInfo {
    to_number(IntegerType.get(), StringType.get()),

    node_to_id(IntegerType.get(), ASTNodeType.get()),
    id_to_node(ASTNodeType.get(), IntegerType.get()),

    c_src_file(StringType.get(), ASTNodeType.get()),
    c_src_line_start(IntegerType.get(), ASTNodeType.get()),
    c_src_line_end(IntegerType.get(), ASTNodeType.get()),
    c_src_col_start(IntegerType.get(), ASTNodeType.get()),
    c_src_col_end(IntegerType.get(), ASTNodeType.get()),

    add(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    mul(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    sub(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    div(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    mod(IntegerType.get(), IntegerType.get(), IntegerType.get()),

    cat(StringType.get(), StringType.get(), StringType.get()),
    attr(IntegerType.get(), IntegerType.get(), IntegerType.get()),

    band(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    bor(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    bxor(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    bshl(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    bshr(IntegerType.get(), IntegerType.get(), IntegerType.get()),
    bshru(IntegerType.get(), IntegerType.get(), IntegerType.get());

    private final Type ret;
    private final Type[] args;

    private FunctorInfo(Type ret, Type ... args) {
      this.ret = ret;
      this.args = args;
    }

    public int arity() {
      return args.length;
    }

    public Type argType(int i) {
      return args[i];
    }

    public Type retType() {
      return ret;
    }

    public static Optional<FunctorInfo> fromName(String name) {
      try {
        return Optional.of(Enum.valueOf(FunctorInfo.class, name));
      } catch(IllegalArgumentException e) {
        return Optional.empty();
      }
    }
  }
}
