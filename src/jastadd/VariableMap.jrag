aspect VariableMap {
	public class VariableMap {
		private Map<String, java.util.List<Variable>> m = new HashMap<>();
		public void add(Variable v) {
			java.util.List<Variable> occurences = m.get(v.getVAR_ID());
			if (occurences == null) {
				occurences = new ArrayList<>();
				m.put(v.getVAR_ID(), occurences);
			}
			occurences.add(v);
		}

		public java.util.List<Variable> get(String varName) {
			java.util.List<Variable> entry = m.get(varName);
			if (entry == null) {
				return Collections.emptyList();
			}
			return entry;
		}

		public Set<String> variableNames() {
			return m.keySet();
		}
	}

	coll VariableMap Clause.varMap() [new VariableMap()] with add;
	Variable contributes this when literal() != null to Clause.varMap() for literal().clause();
	Program contributes nta getExpandedClauses() to Clause.varMap();
	Pattern contributes nta getLiteral() to Clause.varMap();
}
