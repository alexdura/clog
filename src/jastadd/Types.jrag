import lang.ast.Term;
import lang.ast.StringConstant;
import java.util.Comparator;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;

aspect Type {
	public abstract class Type {
		public abstract String name();
		public Type join(Type t) {
			if (t == this)
				return t;
			return this.tryJoin(t).orElse(t.tryJoin(this).orElse(BadType.get()));
		}
		@Override public String toString() { return name(); }

		// Override this method to describe interactions with
		// other types, different than self.
		public Optional<Type> tryJoin(Type t) {
			return Optional.empty();
		}

		public Type storageType() {
			return this;
		}
	}

	public class ASTNodeType extends Type {
		private static ASTNodeType astI = new ASTNodeType();
		private ASTNodeType() { super(); }
		@Override public String name() {
			return "ASTNode";
		}
		@Override public Optional<Type> tryJoin(Type t) {
			// if (t == IntegerType.get())
			// 	return Optional.of(ASTNodeType.get());
			return Optional.empty();
		}
		public static ASTNodeType get() { return astI; }
		@Override public Type storageType() {
			return IntegerType.get();
		}
	}

	public class IntegerType extends Type {
		private static IntegerType intI = new IntegerType();
		private IntegerType() { super(); }
		@Override public String name() {
			return "Integer";
		}
		public static IntegerType get() { return intI; }
	}

	public class StringType extends Type {
		private static StringType strI = new StringType();
		private StringType() { super(); }
		@Override public String name() {
			return "String";
		}
		public static StringType get() {
			return strI;
		}
	}

	public class PredicateRefType extends Type {
		private static PredicateRefType predI = new PredicateRefType();
		private PredicateRefType() { super(); }
		@Override public String name() {
			return "PredicateRef";
		}
		public static PredicateRefType get() {
			return predI;
		}
	}

	public class UnknownType extends Type {
		private static UnknownType unknownI = new UnknownType();
		private UnknownType() { super(); }
		@Override public String name() {
			return "Unknown";
		}
		public static UnknownType get() {
			return unknownI;
		}
		@Override public Optional<Type> tryJoin(Type t) {
			return Optional.of(t);
		}
	}

	public class BadType extends Type {
		private static  BadType badI = new BadType();
		private BadType() { super(); }
		@Override public String name() {
			return "Bad";
		}
		public static BadType get() {
			return badI;
		}
		@Override public Optional<Type> tryJoin(Type t) {
			return Optional.of(this);
		}
	}

	public class PredicateType {
		private ArrayList<Type> types;
		public PredicateType(int arity) {
			types = new ArrayList<>();
			for (int i = 0; i < arity; ++i)
				types.add(UnknownType.get());
		}

		public PredicateType(Type ... components) {
			types = new ArrayList<>();
			for (int i = 0; i < components.length; ++i) {
				types.add(components[i]);
			}
		}

		@Override public String toString() {
			StringBuilder sb = new StringBuilder();
			sb.append("(");
			boolean first = true;
			for (Type t : types) {
				if (first) {
					first = false;
				} else {
					sb.append(", ");
				}
				sb.append(t.name());
			}
			sb.append(")");
			return sb.toString();
		}

		public void joinAt(int i, Type t) {
			types.set(i, types.get(i).join(t));
		}

		public Type get(int i) {
			return types.get(i);
		}

		public int arity() {
			return types.size();
		}

		public static class Index {
			private int i;
			private Type t;
			public Index(int i, Type t) {
				this.i = i;
				this.t = t;
			}
		}

		public void join(Index t) {
			joinAt(t.i, t.t);
		}
	}

	public class TypeComparator implements Comparator<Term> {
		public int compare(Term t1, Term t2) {
			return t1.type().toString().compareTo(t2.type().toString());
		}

		private static TypeComparator instance = null;
		public static TypeComparator get() {
			if (instance == null) {
				instance = new TypeComparator();
			}
			return instance;
		}
	}
}

aspect TypeCheck {
	public abstract class TypeError implements Comparable<TypeError> {
		private int startPos, endPos;
		TypeError(beaver.Symbol s) {
			startPos = s.getStart();
			endPos = s.getEnd();
		}

		@Override public int compareTo(TypeError other) {
			if (startPos != other.startPos)
				return startPos - other.startPos;
			if (endPos != other.endPos)
				return endPos - other.endPos;
			return report().compareTo(other.report());
		}

		public abstract String report();

		public String reportPosition() {
			return beaver.Symbol.getLine(startPos) + "," + beaver.Symbol.getColumn(startPos) + "-" +
				beaver.Symbol.getLine(endPos) + "," + beaver.Symbol.getColumn(endPos) + ": " + report();
		}
	}

	public class PredicateTypeError extends TypeError {
		private Literal l;
		private ArrayList<Integer> pos = new ArrayList<>();
		public void addUndefined(int i) {
			pos.add(i + 1);
		}
		public void addContradictory(int i) {
			pos.add(-i - 1);
		}
		public PredicateTypeError(Literal l) {
			super(l);
			this.l = l;
		}
		public String report() {
			StringBuffer sb = new StringBuffer();
			sb.append("Predicate " + l.getPredicate().getPRED_ID() + " is not well-typed: ");
			for (int i = 0; i < pos.size(); ++i) {
				int e = pos.get(i);
				if (e >= 0)
					sb.append("undefined type at position " + (e - 1));
				else
					sb.append("contradictory type at position " + (-e - 1));
				if (i < pos.size() - 1)
					sb.append(", ");
				else
					sb.append(".");
			}
			return sb.toString();
		}
	}

	public class ExpressionTypeError extends TypeError {
		private int pos;
		private Functor f;
		private Type actualType;
		private Type expectedType;

		public ExpressionTypeError(Functor f, int pos, Type actualType, Type expectedType) {
			super(f);
			this.f = f;
			this.pos = pos;
			this.actualType = actualType;
			this.expectedType = expectedType;
		}

		public String report() {
			return "Expected type " + expectedType + " as argument " + pos + " of " + f + ", but got " + actualType + ".";
		}
	}

	public class TypeMismatchError extends TypeError {
		private CommonLiteral l;
		private Type t1, t2;

		public TypeMismatchError(CommonLiteral l, Type t1, Type t2) {
			super(l);
			this.l = l;
			this.t1 = t1;
			this.t2 = t2;
		}

		public String report() {
			return "Arguments of " + l + " must have the same type " + ", but got " + t1 + " and " + t2 + ".";
		}
	}

	// Type errors for the program. Empty iff the program
	// is well-typed.
	coll TreeSet<TypeError> Program.typeErrors() [new TreeSet<>()];

	private TypeError Literal.typeErrorOUTPUT() {
		if (getTerms(0).type() != PredicateRefType.get())
			return new TypeError(this) {
				public String report() {
					return "Argument to OUTPUT must have type " +
						PredicateRefType.get() + ", but got " + getTerms(0).type() + ".";
				}
			};
		return null;
	}

	private TypeError Literal.typeErrorEDB() {
		Term predRef = getTerms(0);
		if (getTerms(0).type() != PredicateRefType.get())
			return new TypeError(this) {
				public String report() {
					return "First argument to EDB must have type " +
						PredicateRefType.get() + ", but got " + predRef.type() + ".";
				}
			};
		Term fileLoc = getTerms(1);
		if (getTerms(1).type() != StringType.get())
			return new TypeError(this) {
				public String report() {
					return "Second argument to EDB must have type " +
						StringType.get() + ", but got " + fileLoc.type() + ".";
				}
			};
		return null;
	}

	private TypeError Literal.typeErrorIMPORT() {
		Term progRef = getTerms(0);
		if (progRef.type() != PredicateRefType.get())
			return new TypeError(this) {
				public String report() {
					return "First argument to IMPORT must have type " +
						PredicateRefType.get() + ", but got " + progRef.type() + ".";
				}
			};

		Term fileLoc = getTerms(1);
		if (fileLoc.type() != StringType.get())
			return new TypeError(this) {
				public String report() {
					return "Second argument to IMPORT must have type " +
						StringType.get() + ", but got " + fileLoc.type() + ".";
				}
			};

		Term lang = getTerms(2);
		if (lang.type() != StringType.get())
			return new TypeError(this) {
				public String report() {
					return "Third argument to IMPORT must have type " +
						StringType.get() + ", but got " + fileLoc.type() + ".";
				}
			};
		return null;
	}


	syn TypeError Literal.typeError() {
		if (isEDB())
			return typeErrorEDB();
		if (isOUTPUT())
			return typeErrorOUTPUT();
		if (isIMPORT())
			return typeErrorIMPORT();

		PredicateTypeError err = null;
		PredicateType type = getPredicate().formalpredicate().type();
		for (int i = 0; i < type.arity(); ++i) {
			if (type.get(i) == BadType.get()) {
				if (err == null)
					err = new PredicateTypeError(this);
				err.addContradictory(i);
			} else if (type.get(i) == UnknownType.get()) {
				if (err == null)
					err = new PredicateTypeError(this);
				err.addUndefined(i);
			}
		}
		return err;
	}

	syn TypeError Functor.typeError() {
		Type[] expectedType = new Type[2];
		switch (getFunc().getFUNC_ID()) {
		case "add":
		case "mul":
		case "sub":
		case "div":
		case "band":
		case "bor":
		case "bxor":
		case "bshl":
		case "bshr":
		case "bshru":
			expectedType[0] = expectedType[1] = IntegerType.get(); break;
		case "to_number":
			expectedType[0] = StringType.get(); break;
		case "cat":
			expectedType[0] = expectedType[1] = StringType.get(); break;
		case "attr":
			expectedType[0] = IntegerType.get();
			expectedType[1] = StringType.get();
			break;
		default:
			expectedType[0] = expectedType[1] = BadType.get(); break;
		}

		for (int i = 0; i < getNumArg(); ++i) {
			Expr e = getArg(i);
			if (e.type() != expectedType[i]) {
				return new ExpressionTypeError(this, i, e.type(), expectedType[i]);
			}
		}
		return null;
	}

	syn TypeError BinaryIntegerConstraint.typeError() {
		if (getLeft().type() != getRight().type()) {
			return new TypeMismatchError(this, getLeft().type(), getRight().type());
		}
		return null;
	}

	syn TypeError MATCHLiteral.typeError() {
		if (getExpr(0).type() != getExpr(1).type()) {
			return new TypeMismatchError(this, getExpr(0).type(), getExpr(1).type());
		}
		return null;
	}

	syn TypeError BINDLiteral.typeError() {
		if (getDst().type() != getSrc().type()) {
			return new TypeMismatchError(this, getDst().type(), getSrc().type());
		}
		return null;
	}

	Functor contributes typeError() when (typeError() != null) to Program.typeErrors();
	BinaryIntegerConstraint contributes typeError() when (typeError() != null) to Program.typeErrors();
	BINDLiteral contributes typeError() when (typeError() != null) to Program.typeErrors();
	Literal contributes typeError() when (typeError() != null) to Program.typeErrors();
}

aspect TypeInference {
	private PredicateType FormalPredicate.initialTypeInternal() {
		if (getProgramRepresentationKind().isPresent())
			return programRepresentationType(getProgramRepresentationKind().get());
		PredicateType ptype = getContextPredicateType();
		if (ptype != null)
			return ptype;
		return new PredicateType(realArity());
	}

	coll PredicateType FormalPredicate.initialType() [initialTypeInternal()] with join root Program;

	Program contributes nta getExpandedClauses() to FormalPredicate.initialType();
	Pattern contributes nta getLiteral() to FormalPredicate.initialType();

	inh int Expr.indexInLiteral();
	eq Literal.getTerms(int i).indexInLiteral() = i;
	eq Constraint.getExpr(int i).indexInLiteral() = -1;
	eq Literal.getChild().indexInLiteral() = -1;
	eq Expr.getChild().indexInLiteral() = -1;
	eq AnalyzeBlock.getProgramRef().indexInLiteral() = -1;
	eq AnalyzeBlock.getLang().indexInLiteral() = -1;

	IntConstant contributes (new PredicateType.Index(indexInLiteral(), IntegerType.get()))
		when indexInLiteral() >= 0
		to FormalPredicate.initialType()
		for ((Literal)literal()).getPredicate().formalpredicate();

	StringConstant contributes (new PredicateType.Index(indexInLiteral(), StringType.get()))
		when indexInLiteral() >= 0
		to FormalPredicate.initialType()
		for ((Literal)literal()).getPredicate().formalpredicate();

	PredicateRef contributes (new PredicateType.Index(indexInLiteral(), PredicateRefType.get()))
		when indexInLiteral() >= 0
		to FormalPredicate.initialType()
		for ((Literal)literal()).getPredicate().formalpredicate();

	syn PredicateType FormalPredicate.type() circular [initialType()];
	eq FormalPredicate.type() {
		PredicateType current = type();

		if (getProgramRepresentationKind().isPresent())
			return current;
		if (getContextPredicateType() != null)
			return current;
		for (PredicateSymbol ps : predicates()) {
			Literal a = ps.parentLiteral();
			Clause c = a.clause();

			for (int i = 0; i < a.arity(); ++i) {
				Term t = a.getTerms(i);
				if (t instanceof Variable) {
					String varName = ((Variable) t).getVAR_ID();

					java.util.List<Variable> sources = c.varMap().get(varName);
					for (Variable v : sources) {
						current.joinAt(i, v.type());
					}
				}
			}
		}
		return current;
	}

	inh boolean Literal.isPatternLiteral();
	eq Rule.getBody().isPatternLiteral() = false;
	eq Clause.getHeads().isPatternLiteral() = false;
	eq Pattern.getLiteral().isPatternLiteral() = true;

	inh Type Expr.itype();
	eq Literal.getTerms(int i).itype() {
		if (isPatternLiteral()) {
			return ASTNodeType.get();
		} else if (isEDB()) {
			switch (i) {
			case 0: return PredicateRefType.get();
			case 1:
			case 2: return StringType.get();
			default: return UnknownType.get();
			}
		} else if (isIMPORT()) {
			switch (i) {
			case 0: return PredicateRefType.get();
			case 1:
			case 2: return StringType.get();
			default: return UnknownType.get();
			}
		} else if (isOUTPUT()) {
			switch (i) {
			case 0: return PredicateRefType.get();
			case 1:
			case 2: return StringType.get();
			default: return UnknownType.get();
			}
		}
		return UnknownType.get();
	}
	eq Functor.getArg(int i).itype() {
		switch (getFunc().getFUNC_ID()) {
		case "add":
		case "mul":
		case "sub":
		case "div":
		case "band":
		case "bor":
		case "bxor":
		case "bshl":
		case "bshr":
		case "bshru":
			return IntegerType.get();
		case "cat":
		case "to_number":
			return StringType.get();
		case "attr":
			if (i == 0)
				return IntegerType.get();
			else
				return StringType.get();
		default:
			return UnknownType.get();
		}
	}

	eq MATCHLiteral.getExpr().itype() = StringType.get();
	eq Constraint.getExpr().itype() = UnknownType.get();
	eq LTLiteral.getExpr().itype() = IntegerType.get();
	eq GTLiteral.getExpr().itype() = IntegerType.get();
	eq GTELiteral.getExpr().itype() = IntegerType.get();
	eq LTELiteral.getExpr().itype() = IntegerType.get();

	// For an expression, return the other expression that
	// has the same type
	inh Expr Expr.sibling();
	eq Literal.getChild().sibling() = null;
	eq Expr.getChild().sibling() = null;
	eq BinaryIntegerConstraint.getExpr(int i).sibling() = getExpr(1 - i);
	eq MATCHLiteral.getExpr(int i).sibling() = getExpr(1 - i);
	eq BINDLiteral.getExpr(int i).sibling() = getExpr(1 - i);

	// Constant AST nodes are created inside the naive evaluator, but they
	// have no parents, so there is no way to compute the itype() attribute for them,
	// so we use the bottom value in the type lattice.
	syn Type Expr.type() circular [getParent() != null ? itype() : UnknownType.get()];

	eq Expr.type() {
		Type t = type();

		if (sibling() != null) {
			t = t.join(sibling().type());
		}

		if (indexInLiteral() >= 0) {
			Literal l = (Literal) literal();
			t = t.join(l.getPredicate().formalpredicate().type().get(indexInLiteral()));
		}

		return t;
	}

	eq Variable.type() {
		Type t = super.type();
		for (Variable v : literal().clause().varMap().get(getVAR_ID())) {
			t = t.join(v.type());
		}
		return t;
	}

	eq Functor.type() {
		Type t = super.type();
		switch (getFunc().getFUNC_ID()) {
		case "add":
		case "mul":
		case "sub":
		case "div":
		case "band":
		case "bor":
		case "bxor":
		case "bshl":
		case "bshr":
		case "bshru":
		case "to_number":
		case "attr":
			t = t.join(IntegerType.get()); break;
		case "cat":
			t = t.join(StringType.get()); break;
		default:
			t = t.join(BadType.get()); break;
		}
		return t;
	}

	eq IntConstant.type() {
		return IntegerType.get();
	}

	eq StringConstant.type() {
		return StringType.get();
	}

	eq PredicateRef.type() {
		return PredicateRefType.get();
	}

	public void Program.dumpTypes(PrintStream ps) {
		for (FormalPredicate fp : getFormalPredicateList()) {
			ps.println(fp.getPRED_ID() + " : " + fp.type().toString());
		}
	}
}
