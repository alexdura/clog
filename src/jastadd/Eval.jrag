import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.concurrent.Executors;
import lang.CmdLineOpts;
import lang.io.CSVUtil;
import lang.io.FileUtil;
import lang.io.SQLUtil;
import lang.relation.RelationWrapper;
import lang.relation.TupleInserter;
import org.apache.commons.collections4.map.DefaultedMap;
import org.apache.commons.lang3.mutable.MutableInt;
import incremental.ProgramSplit;

aspect Eval {
	public void Program.evalEDB(EvaluationContext ctx, CmdLineOpts opts) throws IOException, SQLException {
		FormalPredicate fpEDB = formalPredicateMap().get(GlobalNames.EDB_NAME);

		if (fpEDB == null) {
			// no IMPORT in the program, nothing to do
			return;
		}

		fpEDB.eval(ctx);

		// now iterate over the tuples in the EDB relation
		RelationWrapper edbTuples = new RelationWrapper(ctx, ctx.getRelation(fpEDB), fpEDB.type());

		for (RelationWrapper.TupleWrapper t : edbTuples.tuples()) {
			String pred = t.getAsString(0);
			String file = t.getAsString(1);
			String format = t.getAsString(2);
			FormalPredicate dstPred = formalPredicateMap().get(pred);
			Relation2 rel = ctx.getRelation(dstPred);

			if (ProgramSplit.isInternalDbDesc(file)) {
				// special path for the internal DB
				Connection conn = opts.getSqlDbConnection();
				SQLUtil.readRelation(ctx, dstPred.type(), ctx.getRelation(dstPred),
									 conn, ProgramSplit.getInternalDbTable(file), opts.getDbEntryTag());
			} else if (format.equals("csv")) {
				CSVUtil.readRelation(ctx, dstPred.type(), ctx.getRelation(dstPred), Paths.get(opts.getFactsDir(), file).toString());
			} else if (format.equals("sqlite")) {
				Connection conn = SQLUtil.connect(Paths.get(opts.getFactsDir(), file).toString());
				SQLUtil.readRelation(ctx, dstPred.type(), ctx.getRelation(dstPred),
									 conn, pred, opts.getDbEntryTag());
				conn.close();
			} else {
				throw new RuntimeException("Unknown format for EDB, " + format + ".");
			}
		}
	}

	public void Program.evalIMPORT(EvaluationContext ctx, CmdLineOpts opts) throws IOException {
		FormalPredicate fpIMPORT = formalPredicateMap().get(GlobalNames.IMPORT_NAME);

		if (fpIMPORT == null) {
			// no IMPORT in the program, nothing to do
			return;
		}

		fpIMPORT.eval(ctx);

		// now iterate over the tuples in the IMPORT relation
		RelationWrapper edbTuples = new RelationWrapper(ctx, ctx.getRelation(fpIMPORT), fpIMPORT.type());

		for (RelationWrapper.TupleWrapper t : edbTuples.tuples()) {
			String pred = t.getAsString(0);
			String dir = t.getAsString(1);
			String wildcard = t.getAsString(2);

			FormalPredicate dstPred = formalPredicateMap().get(pred);
			Relation2 rel = ctx.getRelation(dstPred);
			RelationWrapper relWrapper = new RelationWrapper(ctx, rel, dstPred.type());

			for (File f : FileUtil.flattenFilesAndDirs(Collections.singletonList(new File(dir)), wildcard)) {
				relWrapper.insertTuple(f.getPath(), "A");
			}
		}
	}

	public void Program.evalOUTPUT(EvaluationContext ctx, CmdLineOpts opts) throws IOException, SQLException {
		FormalPredicate fpOUTPUT = formalPredicateMap().get(GlobalNames.OUTPUT_NAME);

		if (fpOUTPUT == null) {
			// no IMPORT in the program, nothing to do
			return;
		}

		fpOUTPUT.eval(ctx);

		// now iterate over the tuples in the OUTPUT relation
		RelationWrapper outputTuples = new RelationWrapper(ctx, ctx.getRelation(fpOUTPUT), fpOUTPUT.type());

		for (RelationWrapper.TupleWrapper t : outputTuples.tuples()) {
			String pred = t.getAsString(0);
			String file = t.getAsString(1);
			String format = t.getAsString(2);

			FormalPredicate srcPred = formalPredicateMap().get(pred);
			if (ProgramSplit.isInternalDbDesc(file)) {
				String table = ProgramSplit.getInternalDbTable(file);
				String mode = ProgramSplit.getInternalDbMode(file);

				// the current write mode is always append
				assert mode.equals("append");

				Connection conn = opts.getSqlDbConnection();
				SQLUtil.writeRelation(ctx, srcPred.type(), ctx.getRelation(srcPred),
									  conn, table, opts.getDbEntryTag());
			} else if (format.equals("sqlite")) {
				Connection conn = SQLUtil.connect(Paths.get(opts.getFactsDir(), file).toString());
				SQLUtil.writeRelation(ctx, srcPred.type(), ctx.getRelation(srcPred),
									  conn, pred, opts.getDbEntryTag());
				conn.close();
			} else if (format.equals("csv")) {
				CSVUtil.writeRelation(ctx, srcPred.type(), ctx.getRelation(srcPred), Paths.get(opts.getOutputDir(), file).toString());
			} else {
				throw new RuntimeException("Unknown format for OUTPUT, " + format + ".");
			}
		}
	}

	public void Program.populateProgramRepresentation(EvaluationContext ctx, CmdLineOpts opts,
													  Map<FormalPredicate, TupleInserter> fpToSoufflePredMap) throws IOException {
		// now populate the relations associated with the analyze block
		DatalogProjectionSink tupleSink = getDatalogProjectionSink(ctx);

		// use the fpToSoufflePredMap to remap inserters in the
		// DatalogProjectionSink
		if (fpToSoufflePredMap != null) {
			tupleSink = tupleSink.remap(fpToSoufflePredMap);
		}

		java.util.List<String> locs = opts.getSrcs().keySet().stream().collect(Collectors.toList());

		switch (opts.getLang()) {
		case JAVA:
			FileUtil.loadJavaSources(ctx, tupleSink, locs);
			break;

		case C:
			FileUtil.loadCSources(ctx, tupleSink, locs);
			break;

		case METADL:
			MutableInt nodeCounter = new MutableInt(1);
			try {
				if (locs.size() == 0)
					return;

				if (locs.size() != 1) {
					throw new RuntimeException("MetaDL for MetaDL is limited to analyzing a single file");
				}
				lang.metadl.obj.ast.Program importedProgram = lang.metadl.obj.ast.Program.fromFileLoc(locs.get(0));
				importedProgram.assignIds(nodeCounter);
				RelationWrapper rw = (RelationWrapper) tupleSink.getAST();
				rw.insertTuples(importedProgram.datalogProjection().tuples());
			} catch (beaver.Parser.Exception exception) {
				throw new RuntimeException(exception);
			}
			break;
		}
	}

	public void Program.generateObjectProgramRelations(EvaluationContext ctx, CmdLineOpts opts) throws IOException, SQLException {
		// Start a timer to measure the speed of the import
		StopWatch progRelTimer = StopWatch.createStarted();

		// Evaluate the analyze blocks
		populateProgramRepresentation(ctx, opts, null);

		// Iterate over all the program representation predicates and dump their relations
		// to CSV files.
		for (FormalPredicate srcPred : getFormalPredicates()) {
			if (srcPred.getProgramRepresentationKind().isPresent()) {
				if (opts.getSqlDbConnection() != null) {
					SQLUtil.writeRelation(ctx, srcPred.type(), ctx.getRelation(srcPred), opts.getSqlDbConnection(),
										  srcPred.getPRED_ID(), opts.getDbEntryTag());
				} else {
					CSVUtil.writeRelation(ctx, srcPred.type(), ctx.getRelation(srcPred),
									  opts.getFactsDir() + "/" + srcPred.getPRED_ID() + ".csv");
				}
			}
		}

		// stop the timer and report
		progRelTimer.stop();
		SimpleLogger.logger().time("Evaluate IMPORT statements: " + progRelTimer.getTime() + "ms");
	}


	public void Program.dumpAllRelations(EvaluationContext ctx) throws IOException {
		for (FormalPredicate pred : getFormalPredicates()) {
			CSVUtil.writeRelation(ctx, pred.type(), ctx.getRelation(pred), pred.getPRED_ID() + ".csv");
		}
	}

	public void Program.eval(EvaluationContext ctx, CmdLineOpts opts) throws IOException, SQLException {
		java.util.List<Stratum> strata = strata(ctx);
		dumpStrata();
		clauseDependencyGraph().dump();

		evalEDB(ctx, opts);
		evalIMPORT(ctx, opts);
		populateProgramRepresentation(ctx, opts, null);

		for (Stratum s : strata) {
			s.eval();
		}
		evalOUTPUT(ctx, opts);
		if (false) dumpAllRelations(ctx);
	}

	public void Program.evalParallel(EvaluationContext ctx, CmdLineOpts opts) throws IOException, SQLException {
		// TODO: this evaluation strategy is now broken, since a relation
		// can be defined in multiple strata.
		evalEDB(ctx, opts);
		populateProgramRepresentation(ctx, opts, null);

		dumpStrata();
		clauseDependencyGraph().dump();

		int hwThreads = Runtime.getRuntime().availableProcessors();
		ExecutorService exec = Executors.newFixedThreadPool(Math.max(1, hwThreads / 2));

		java.util.List<ParallelStratum> readyStrata = new LinkedList<>(parallelStrata(ctx, exec));
		LinkedList<Future<java.util.List<ParallelStratum>>> futures = new LinkedList<>();

		while (!(readyStrata.isEmpty() && futures.isEmpty())) {
			// schedule any stratum that is ready
			for (ParallelStratum s : readyStrata) {
				futures.add(exec.submit(s));
			}
			readyStrata.clear();

			// iterate over all futures, check if they are done;
			// if they are, then decrement the counters of successor strata
			ListIterator<Future<java.util.List<ParallelStratum>>> it =  futures.listIterator(0);
			while (it.hasNext()) {
				Future<java.util.List<ParallelStratum>> f = it.next();
				if (f.isDone()) {
					it.remove();
					try {
						java.util.List<ParallelStratum> succs = f.get();
						for (ParallelStratum s : succs) {
							s.decPreds();
							if (s.isReady())
								readyStrata.add(s);
						}
					} catch (InterruptedException e) {
						throw new RuntimeException(e);
					} catch (ExecutionException e) {
						throw new RuntimeException(e);
					}
				}
			}
		}

		exec.shutdown();
		try {
			exec.awaitTermination(Integer.MAX_VALUE, java.util.concurrent.TimeUnit.DAYS);
		} catch (InterruptedException e) {
		}

		evalOUTPUT(ctx, opts);
		if (false) dumpAllRelations(ctx);
	}

	public void FormalPredicate.eval(EvaluationContext ctx) {
		for (Stratum s : strata(ctx)) {
			s.eval();
		}
	}
}
