import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.Comparator;
import lang.relation.PseudoTuple;

aspect Arity {
	syn int Literal.arity() = getNumTerms();

	syn HashSet<Integer> FormalPredicate.arities() {
		HashSet<Integer> arities = new HashSet<Integer>();
		for(PredicateSymbol pred : predicates()) {
			arities.add(pred.parentLiteral().arity());
		}
		return arities;
	}

	syn HashSet<Integer> FormalPredicate.realArities() {
		HashSet<Integer> realArities = new HashSet<Integer>(arities());
		realArities.remove(-1);
		return realArities;
	}

	syn boolean FormalPredicate.isUniqueArity() {
		return realArities().size() <= 1;
	}

	syn int FormalPredicate.realArity() {
		if(!isUniqueArity() || realArities().size() == 0) return 0;
		return realArities().iterator().next();
	}

	Program contributes nta getFormalPredicates() to Program.semanticErrors();
	FormalPredicate contributes new SemanticError(this, "Different Arities for predicate symbol: " + predicateName())
		when !isUniqueArity() && arities().size() != 1
		to Program.semanticErrors();
}
