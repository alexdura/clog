import java.util.Comparator;

aspect Conversion {
	public String StringConstant.toString() { return getSTRING(); }
	public String IntConstant.toString()    { return getNUMERAL(); }

	public String Term.toString()            { return "NO_IMPL_TO_STRING"; }
	public String Variable.toString()        { return getVAR_ID(); }
	public String PredicateRef.toString()    { return "'" + getPRED_ID(); }
	public String FormalPredicate.toString() { return "FP_" + predicateName(); }
	public String Wildcard.toString()        { return "_"; }
	public String ASTNode.toString()         { return prettyPrint(); }
}

aspect Comparison {
	public class ComparePredicates implements Comparator<PredicateInterface> {
		@Override
		public int compare(PredicateInterface t1, PredicateInterface t2) {
			if(t1.isRef() != t2.isRef()) return t1.isRef() ? -1 : 1;
			return t1.getPRED_ID().compareTo(t2.getPRED_ID());
		}
	}
	public static final ComparePredicates Program.predicateComparator = new ComparePredicates();

	@Override
	public boolean PredicateSymbol.equals(Object o) {
		if(!(o instanceof PredicateSymbol)) return false;
		return Program.predicateComparator.compare(this, (PredicateSymbol)o) == 0;
	}

	@Override
	public boolean PredicateRef.equals(Object o) {
		if(!(o instanceof PredicateRef)) return false;
		return Program.predicateComparator.compare(this, (PredicateRef)o) == 0;
	}

	public class CompareFormalPredicate implements Comparator<FormalPredicate> {
		@Override
		public int compare(FormalPredicate p1, FormalPredicate p2) {
			return p1.predicateName().compareTo(p2.predicateName());
		}
	}

	public static final CompareFormalPredicate FormalPredicate.formalPredicateComparator = new CompareFormalPredicate();
	@Override
	public boolean FormalPredicate.equals(Object o) {
		if(!(o instanceof FormalPredicate)) return false;
		return formalPredicateComparator.compare(this, (FormalPredicate)o) == 0;
	}

	@Override
	public int FormalPredicate.hashCode() {
		return predicateName().hashCode();
	}
}
