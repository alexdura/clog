import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.alg.connectivity.KosarajuStrongConnectivityInspector;
import org.jgrapht.alg.interfaces.StrongConnectivityAlgorithm;
import org.jgrapht.nio.dot.DOTExporter;
import org.jgrapht.traverse.TopologicalOrderIterator;
import java.util.LinkedHashSet;
import java.io.FileWriter;
import eval.Stratum;
import org.apache.commons.lang3.tuple.Triple;
import org.apache.commons.text.StringEscapeUtils;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Callable;

aspect Stratification {
	public class ClauseDependencyGraph extends DefaultDirectedGraph<Clause, DefaultEdge> {
		ClauseDependencyGraph() {
			super(DefaultEdge.class);
		}

		/**
		   es - a pair of (defining_clauses, clause), where defining_clauses define
		   the predicates used in clause
		 */
		public void addEdge(Pair<Collection<Clause>, Clause> es) {
			Clause to = es.getRight();

			addVertex(to);

			for (Clause from : es.getLeft()) {
				addVertex(from);
				addEdge(from, to);
			}
		}

		public void dump() throws IOException {
			DOTExporter<Clause, DefaultEdge> dotEx = new DOTExporter<>(c -> "\"" + StringEscapeUtils.escapeJava(c.toString()) + "\"");
			dotEx.exportGraph(this, new FileWriter("pdg.dot"));

			StrongConnectivityAlgorithm<Clause, DefaultEdge> sc =
				new KosarajuStrongConnectivityInspector<>(this);

			DOTExporter<Graph<Clause, DefaultEdge>, DefaultEdge> dotEx2 = new DOTExporter<>();

			dotEx2.exportGraph(sc.getCondensation(), new FileWriter("scc.dot"));
		}
	}

	/**
	   clauseDependencyGraph = a graph with vertices representing the clauses of the program and
	   edges the data-dependencies between these clauses. The graph contains an edge C1 -> C2 iff
	   the clause C1 defines a literal that is used by C2
	 */
	coll ClauseDependencyGraph Program.clauseDependencyGraph() [new ClauseDependencyGraph()] with addEdge;
	coll Set<Clause> FormalPredicate.definedIn() [new LinkedHashSet<Clause>()];

	/**
	   dependsOn() - the set of clauses where literals in the body of this clause are defined
	 */
	syn Set<Clause> Clause.dependsOn();
	eq Fact.dependsOn() = Collections.emptySet();
	eq Rule.dependsOn() {
		Set<Clause> deps = new HashSet<>();
		for (CommonLiteral b : getBodys()) {
			for (CommonLiteral t : b.evalLiteralList()) {
				if (t instanceof Literal) {
					Literal l = (Literal) t;
					FormalPredicate fp = l.getPredicate().formalpredicate();
					for (Clause c : fp.definedIn()) {
						deps.add(c);
					}
				}
			}
		}
		return deps;
	}

	syn Pair<Collection<Clause>, Clause> Clause.pdgContribution();
	eq Rule.pdgContribution() {
		return Pair.of(dependsOn(), this);
	}
	eq Fact.pdgContribution() {
		return Pair.of(Collections.emptySet(), this);
	}

	Clause contributes pdgContribution() to Program.clauseDependencyGraph();
	Program contributes nta getExpandedClauses() to Program.clauseDependencyGraph();

	Literal contributes clause() when isDef() to FormalPredicate.definedIn() for getPredicate().formalpredicate();
	Program contributes nta getExpandedClauses() to FormalPredicate.definedIn();


	public static Stratum Program.genStratum(EvaluationContext ctx, ClauseDependencyGraph pdg,
											 Graph<Clause, DefaultEdge> scc) {
		java.util.List<Clause> orderedClauses = new ArrayList<>(scc.vertexSet());
		// sort the clauses to get a deterministic behavior, not necessary for correctness
		Collections.sort(orderedClauses, (l, r) -> l.toString().compareTo(r.toString()));

		if (orderedClauses.size() == 1 &&
			!pdg.containsEdge(orderedClauses.get(0), orderedClauses.get(0))) {
			// the stratum contains a single clause; if it does not depend on
			// itself, then it's safe to evaluate all its rules only once
			Clause c = orderedClauses.get(0);
			// control statements in the current stratum
			java.util.List<Control> stmts = c.genCode(ctx, false, Collections.emptySet());
			return Stratum.single(stmts, c.evalVariables().size(), c.toString());
		} else {
			// collect the predicates defined in the current stratum
			Set<FormalPredicate> definedPreds = new LinkedHashSet<>();
			for (Clause c : orderedClauses) {
				for (CommonLiteral l : c.getHeadss()) {
					definedPreds.add(((Literal) l).getPredicate().formalpredicate());
				}
			}

			// control statements in the current stratum
			java.util.List<Pair<Control, Integer>> stmts = new ArrayList<>();
			String desc = "";
			for (Clause c : orderedClauses) {
				c.genCode(ctx, true, definedPreds).stream()
					.map(s -> Pair.of(s, c.evalVariables().size()))
					.forEachOrdered(stmts::add);
				desc += c.toString();
			}

			java.util.List<Triple<Relation2, Relation2, Relation2>> rels = definedPreds.stream()
				.map(p -> Triple.of(ctx.getRelation(p),
									ctx.getNextRelation(p),
									ctx.getDeltaRelation(p)))
				.collect(Collectors.toList());
			return Stratum.fixpoint(rels, stmts, desc);
		}
	}

	syn lazy java.util.List<Stratum> Program.strata(EvaluationContext ctx) {
		java.util.List<Stratum> strata = new ArrayList<>();
		ClauseDependencyGraph pdg = clauseDependencyGraph();

		TopologicalOrderIterator<Graph<Clause, DefaultEdge>, DefaultEdge> it = new
			TopologicalOrderIterator<>(clauseDependencySCC());

		while (it.hasNext()) {
			Graph<Clause, DefaultEdge> scc = it.next();
			strata.add(genStratum(ctx, pdg, scc));
		}

		return strata;
	}

	public class ParallelStratum implements Runnable {
		Stratum s;

		java.util.List<Future<?>> deps = new ArrayList<>();

		public ParallelStratum(Stratum s) {
			this.s = s;
		}

		@Override public void run() {
			// wait for all predecessors to finnish before
			// starting this stratum
			for (Future<?> dep : deps) {
				try {
					dep.get();
				} catch (Exception e) {
					throw new RuntimeException(e);
				}
			}
			s.eval();
		}

		public void addPredecessor(Future<?> f) {
			deps.add(f);
		}
	}

	public void Program.evalParallelStrata(EvaluationContext ctx) {
		Map<Graph<Clause, DefaultEdge>, ParallelStratum> sccToStratum = new HashMap<>();

		ClauseDependencyGraph pdg = clauseDependencyGraph();
		Graph<Graph<Clause, DefaultEdge>, DefaultEdge> pdSCC = clauseDependencySCC();


		Map<ParallelStratum, Future<?>> futures = new HashMap<>();
		java.util.List<Future<?>> finalStrata = new ArrayList<>();

		for (Graph<Clause, DefaultEdge> scc : pdSCC.vertexSet()) {
			ParallelStratum s = new ParallelStratum(genStratum(ctx, pdg, scc));
			sccToStratum.put(scc, s);
		}

		TopologicalOrderIterator<Graph<Clause, DefaultEdge>, DefaultEdge> it =
			new TopologicalOrderIterator<>(pdSCC);

		ExecutorService exec = ctx.getExecutorService();

		while (it.hasNext()) {
			Graph<Clause, DefaultEdge> scc = it.next();
			ParallelStratum ps = sccToStratum.get(scc);

			for(DefaultEdge e : pdSCC.incomingEdgesOf(scc)) {
				Graph<Clause, DefaultEdge> predSCC = pdSCC.getEdgeSource(e);
				Future<?> f = futures.get(sccToStratum.get(predSCC));
				assert f != null;
				ps.addPredecessor(f);
			}

			Future<?> f = exec.submit(ps);
			futures.put(ps, f);

			if (pdSCC.outgoingEdgesOf(scc).isEmpty()) {
				finalStrata.add(f);
			}
		}

		try {
			for (Future<?> f : finalStrata) {
				f.get();
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	inh Graph<Graph<Clause, DefaultEdge>, DefaultEdge> FormalPredicate.clauseDependencySCC();
	eq Program.getFormalPredicate().clauseDependencySCC() = clauseDependencySCC();
	inh ClauseDependencyGraph FormalPredicate.clauseDependencyGraph();
	eq Program.getFormalPredicate().clauseDependencyGraph() = clauseDependencyGraph();

	private void FormalPredicate.transitiveClosureHelper(Graph<Graph<Clause, DefaultEdge>, DefaultEdge> scc,
														 Graph<Clause, DefaultEdge> thisSCC,
														 LinkedHashSet<Graph<Clause, DefaultEdge>> strata) {
		if (strata.contains(thisSCC))
			return;
		strata.add(thisSCC);
		for (DefaultEdge predSCCEdge : scc.incomingEdgesOf(thisSCC)) {
			Graph<Clause, DefaultEdge> predSCC = scc.getEdgeSource(predSCCEdge);
			transitiveClosureHelper(scc, predSCC, strata);
		}
	}

	// FormalPredicate.strata = strata that this predicate depends on, includig its own stratum;
	// the list is sorted in topological order
	syn java.util.List<Stratum> FormalPredicate.strata(EvaluationContext ctx) {

		LinkedHashSet<Graph<Clause, DefaultEdge>> strataAsSCC = new LinkedHashSet<>();

		for (Clause c : definedIn()) {
			// find the SCC that contains this clause
			Graph<Clause, DefaultEdge> thisSCC =
				clauseDependencySCC().vertexSet().stream().filter(e -> e.vertexSet().contains(c)).findFirst().get();

			// collect all the clauses the current clause depends upon
			transitiveClosureHelper(clauseDependencySCC(),
									thisSCC, strataAsSCC);

		}
		LinkedList<Stratum> strata = new LinkedList<>();

		strataAsSCC.forEach(scc -> strata.addFirst(Program.genStratum(ctx, clauseDependencyGraph(), scc)));

		return strata;
	}

	public void Program.dumpStrata(EvaluationContext ctx) throws IOException {
		PrintStream f = new PrintStream("strata.dump");

		for (Stratum s : strata(ctx)) {
			s.prettyPrint(f);
			f.println();
		}
		f.close();
	}
}

aspect StratificationError {
	syn lazy Graph<Graph<Clause, DefaultEdge>, DefaultEdge> Program.clauseDependencySCC() {
		ClauseDependencyGraph pdg = clauseDependencyGraph();

		StrongConnectivityAlgorithm<Clause, DefaultEdge> sca =
			new KosarajuStrongConnectivityInspector<>(pdg);

		return sca.getCondensation();
	}

	syn lazy Map<Clause, Graph<Clause, DefaultEdge>> Program.clauseToSCCMap() {
		Map<Clause, Graph<Clause, DefaultEdge>> clauseToSCCMap = new HashMap<>();
		for (Graph<Clause, DefaultEdge> scc : clauseDependencySCC().vertexSet()) {
			for (Clause c : scc.vertexSet())
				clauseToSCCMap.put(c, scc);
		}
		return clauseToSCCMap;
	}
	inh Map<Clause, Graph<Clause, DefaultEdge>> CommonClause.clauseToSCCMap();
	eq Program.getCommonClause().clauseToSCCMap() = clauseToSCCMap();
	eq Program.getExpandedClause().clauseToSCCMap() = clauseToSCCMap();
	inh Map<Clause, Graph<Clause, DefaultEdge>> Clause.clauseToSCCMap();

	syn Graph<Clause, DefaultEdge> Clause.getSCC() {
		return clauseToSCCMap().get(this);
	}

	syn boolean Literal.unstratifiableNegation() {
		if (!hasNot())
			return false;
		// this is a negated literal
		FormalPredicate fp = getPredicate().formalpredicate();
		Graph<Clause, DefaultEdge> scc = clause().getSCC();
		for (Clause c : scc.vertexSet()) {
			for (CommonLiteral l : c.getHeadss())
				if (l instanceof Literal &&
					((Literal) l).getPredicate().formalpredicate().equals(fp))
					return true;
		}

		return false;
	}

	Literal contributes new SemanticError(this, "Unstratifiable program due to literal " + this + ".") when
		unstratifiableNegation() to Program.semanticErrors();


}
