aspect Constructors {
	public Literal.Literal(PredicateSymbol p, List<Term> ts) {
		this(new Opt(), p, ts);
	}
	public EQLiteral.EQLiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public NEQLiteral.NEQLiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public GTLiteral.GTLiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public LTLiteral.LTLiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public GTELiteral.GTELiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public LTELiteral.LTELiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public BINDLiteral.BINDLiteral(Expr dst, Expr src) {
		this(new Opt(), new List<Expr>().add(dst).add(src));
	}
	public MATCHLiteral.MATCHLiteral(Expr regex, Expr str) {
		this(new Opt(), new List<Expr>().add(regex).add(str));
	}
	public ANCESTORLiteral.ANCESTORLiteral(Expr l, Expr r) {
		this(new Opt(), new List<Expr>().add(l).add(r));
	}
	public Pattern.Pattern(String s) {
		this(new Opt(), s);
	}
	public BoundedPattern.BoundedPattern(beaver.Symbol s, CommonVariable v) {
		this(new Opt(), s, v);
	}

	public class Constructors {
		public static lang.ast.Literal literal(String pred, Object ...args) {
			lang.ast.List<lang.ast.Term> terms = new lang.ast.List<>();
			for (Object o : args) {
				if (o instanceof Integer) {
					terms.add(new lang.ast.IntConstant("" + o));
				} else if (o instanceof String) {
					String s = (String) o;
					if (s.startsWith("$"))
						terms.add(new lang.ast.Variable(s.substring(1)));
					else if (s.equals("_"))
						terms.add(new lang.ast.Wildcard());
					else
						terms.add(new lang.ast.StringConstant(s));
				} else if (o instanceof Term) {
					terms.add((Term) o);
				} else {
					throw new RuntimeException("Can't interpret argument.");
				}
			}
			return new lang.ast.Literal(new lang.ast.PredicateSymbol(pred), terms);
		}

		public static lang.ast.Rule rule(lang.ast.CommonLiteral ...literals) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			headList.add(literals[0]);

			lang.ast.List<lang.ast.CommonLiteral> bodyList = new lang.ast.List<>();
			for (int i = 1; i < literals.length; ++i)
				bodyList.add(literals[i]);

			lang.ast.Rule r = new lang.ast.Rule(headList, bodyList);

			return r;
		}

		public static lang.ast.Fact fact(lang.ast.CommonLiteral ...literals) {
			lang.ast.List<lang.ast.CommonLiteral> headList = new lang.ast.List<>();
			for (lang.ast.CommonLiteral l : literals) {
				headList.add(l);
			}
			lang.ast.Fact f = new lang.ast.Fact(headList);
			return f;
		}

		public static lang.ast.Variable var(String name) {
			return new lang.ast.Variable(name);
		}

		public static lang.ast.StringConstant str(String s) {
			return new lang.ast.StringConstant(s);
		}

		public static lang.ast.IntConstant integer(long i) {
			return new lang.ast.IntConstant("" + i);
		}

		public static lang.ast.PredicateRef ref(String s) {
			return new lang.ast.PredicateRef(s);
		}

		public static lang.ast.CommonLiteral NEQ(lang.ast.Expr e1, lang.ast.Expr e2) {
			return new lang.ast.NEQLiteral(e1, e2);
		}

		public static lang.ast.CommonLiteral EQ(lang.ast.Expr e1, lang.ast.Term e2) {
			return new lang.ast.EQLiteral(e1, e2);
		}

		public static lang.ast.CommonLiteral NOT(lang.ast.CommonLiteral l) {
			return l.setNot(new Not());
		}

		public static lang.ast.CommonLiteral BIND(lang.ast.Expr dst, lang.ast.Expr src) {
			return new BINDLiteral(dst, src);
		}

		public static lang.ast.Literal NOT(lang.ast.Literal l) {
			return l.setNot(new Not());
		}

		public static lang.ast.Functor functor(String name, Expr ... arg) {
			lang.ast.List<lang.ast.Expr> argList = new lang.ast.List<>(arg);
			return new lang.ast.Functor(new lang.ast.FunctorSymbol(name), argList);
		}
	}
}
