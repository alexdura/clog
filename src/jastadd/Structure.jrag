import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Set;
import lang.io.SimpleLogger;
import java.util.Collections;

aspect Utility {
	public class MapEntry<Key, Value> {
		public Key k;
		public Value v;

		public MapEntry(Key k, Value v) {
			this.k = k;
			this.v = v;
		}

		public boolean equals(Object o) {
			if (!(o instanceof MapEntry))
				return false;
			MapEntry<Key, Value> other = (MapEntry<Key, Value>) o;
			return k.equals(other.k) && v.equals(other.v);
		}

		public int hashCode() {
			return k.hashCode() ^ v.hashCode();
		}
	}

	public abstract class SetConstructor<Value, S extends Set<Value>> {
		public abstract S construct();
	}

	 public class HashSetConstructor<Value> extends SetConstructor<Value, HashSet<Value>> {
		public HashSet<Value> construct() {
			return new HashSet<Value>();
		}
	}

	public class MapToSetOf<Key, Value> extends HashMap<Key, Set<Value>> {
		private SetConstructor<Value, Set<Value>> constructor;
		public MapToSetOf(SetConstructor<Value, Set<Value>> constructor) {
			this.constructor = constructor;
		}
		public void add(MapEntry<Key, Value> me) {
			Set<Value> values = get(me.k);
			if(values == null) {
				values = constructor.construct();
				values.add(me.v);
				put(me.k, values);
			}else {
				values.add(me.v);
			}
		}


		public void addAll(Set<MapEntry<Key, Value>> mes) {
			for(MapEntry<Key, Value> me : mes) {
				Set<Value> values = get(me.k);
				if(values == null) {
					values = constructor.construct();
					values.add(me.v);
					put(me.k, values);
				}else {
					values.add(me.v);
				}
			}
		}
	}
}

aspect Program {
	private CmdLineOpts.Lang Program.analyzedLang = CmdLineOpts.Lang.JAVA;
	public void Program.setLang(CmdLineOpts.Lang l) { analyzedLang = l; }
	public CmdLineOpts.Lang Program.getLang() { return analyzedLang; }

	inh Program CommonClause.program();
	eq Program.getChild().program() = this;
	inh Program FormalPredicate.program();
	inh Program PredicateSymbol.program();
	inh Program PredicateRef.program();
	inh Program CommonLiteral.program();

	coll HashSet<PredicateInterface> Program.predicateSymbols() [new HashSet<PredicateInterface>()] with add;
	PredicateSymbol contributes this to Program.predicateSymbols();
	PredicateRef	contributes this to Program.predicateSymbols();

	syn TreeSet<PredicateInterface> Program.uniquePredicateSymbols() {
		TreeSet<PredicateInterface> uniquePredicateSymbols = new TreeSet<PredicateInterface>(Program.predicateComparator);
		uniquePredicateSymbols.addAll(predicateSymbols());
		return uniquePredicateSymbols;
	}

	syn MapToSetOf<String, PredicateInterface> Program.predicateMap() {
		MapToSetOf<String, PredicateInterface> predicateMap = new MapToSetOf(new HashSetConstructor());
		for(PredicateInterface pred : predicateSymbols())
			predicateMap.add(new MapEntry(pred.getPRED_ID(), pred));
		return predicateMap;
	}

	public class FormalPredicateMap extends HashMap<String, FormalPredicate> {
		public void add(MapEntry<String, FormalPredicate> me) { put(me.k, me.v); }
	}

	coll FormalPredicateMap Program.formalPredicateMap() [new FormalPredicateMap()] with add;
	Program contributes nta getFormalPredicateList() to Program.formalPredicateMap();
	FormalPredicate contributes new MapEntry(predicateName(), this) to Program.formalPredicateMap();
	eq Program.getChild().formalPredicateMap() = formalPredicateMap();

	coll TreeSet<Literal> Program.predefinedLiterals() [new TreeSet<Literal>(Literal.literalComparator)] with add;
	Literal contributes this when isPredefined() to Program.predefinedLiterals();
}

aspect Clause {
	inh Clause CommonLiteral.clause();
	eq Clause.getChild().clause() = this;

	syn boolean CommonClause.isRule();
	eq Rule.isRule() = true;
	eq Fact.isRule() = false;
	eq AnalyzeBlock.isRule() = false;

	syn TreeSet<Variable> Rule.variables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for (CommonLiteral l : getHeadss())
			variables.addAll(l.variables());
		for (CommonLiteral l : getBodys())
			variables.addAll(l.variables());
		return variables;
	}

	syn TreeSet<Variable> Rule.headVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : getHeadss()) variables.addAll(l.variables());
		return variables;
	}

	syn TreeSet<Variable> Rule.bodyVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : getBodys()) variables.addAll(l.variables());
		return variables;
	}

	syn TreeSet<Variable> Rule.unboundVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(Variable v : headVariables())
			if(!bodyVariables().contains(v)) variables.add(v);
		return variables;
	}

	syn TreeSet<Variable> Rule.boundVariables() {
		TreeSet<Variable> variables = new TreeSet<Variable>(Term.termComparator);
		for(CommonLiteral l : getBodys()) {
			variables.addAll(l.boundVariables());
		}
		return variables;
	}
}

aspect Literal {
	/**
	   TODO: remove, used only in tests.
	 */
	syn PredicateSymbol CommonLiteral.predicate();
	eq Pattern.predicate() = null;
	eq Constraint.predicate() = null;
	eq Literal.predicate() = getPredicate();

	inh boolean CommonLiteral.isFact();
	eq Clause.getChild().isFact()		 = false;
	eq Fact.getHeads(int index).isFact() =	true;

	syn boolean Literal.isEDB() = getPredicate().getPRED_ID().equals(GlobalNames.EDB_NAME);
	syn boolean Literal.isOUTPUT() = getPredicate().getPRED_ID().equals(GlobalNames.OUTPUT_NAME);
	syn boolean Literal.isIMPORT() = getPredicate().getPRED_ID().equals(GlobalNames.IMPORT_NAME);
	syn boolean Literal.isPredefined() = isEDB() || isOUTPUT() || isIMPORT();

	/**
	   boundVariables = variables bound by the current literal
	*/
	syn TreeSet<Variable> CommonLiteral.boundVariables();
	eq Literal.boundVariables() {
		if (hasNot())
			return new TreeSet<>();
		return variables();
	}
	eq Constraint.boundVariables() = new TreeSet<>();
	eq BINDLiteral.boundVariables() = getDst().variables();

	/**
	   isDef = true iff the literal is present in a rule's head or in a fact
	 */
	inh boolean CommonLiteral.isDef();
	eq Clause.getChild().isDef() = false;
	eq Rule.getHeads().isDef()	 =	true;
	eq Fact.getHeads().isDef()	 =	true;

	/**
	   isUse = true iff the literal is present in a rule's body
	*/
	inh boolean Literal.isUse();
	eq Clause.getChild().isUse() = false;
	eq Rule.getBody().isUse()	 = true;

	/**
	   isGround = the literal contains only constants, e.g. A(), B(1, "a"), etc.
	 */
	syn boolean Literal.isGround() = variables().isEmpty();

	/**
	   variables = set of variables used in the literal, sorted and uniqued by name

	 */
	syn TreeSet<Variable> CommonLiteral.variables();
	eq Literal.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		for(Term t : getTermss())
			if(t.isVariable())
				vars.addAll(t.variables());
		return vars;
	}

	eq Constraint.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		for(Expr e : getExprs())
			vars.addAll(e.variables());
		return vars;
	}

	eq BINDLiteral.variables()	{
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		Variable v;
		vars.addAll(getDst().variables());
		vars.addAll(getSrc().variables());
		return vars;
	}
}

aspect Predicate {
	/**
	   parentLiteral = the literal that owns this predicate symbol
	 */
	inh Literal PredicateSymbol.parentLiteral();
	eq Literal.getPredicate().parentLiteral() = this;

	/**
	   literal = the literal that encloses this term, if any;
	   terms may be used outside literals, case in which literal = null
	 */
	inh CommonLiteral Term.literal();
	inh CommonLiteral PredicateRef.literal();
	inh CommonLiteral Expr.literal();

	eq Literal.getChild().literal() = this;
	eq Constraint.getChild().literal() = this;
	eq AnalyzeBlock.getChild().literal() = null;

	public interface PredicateInterface {
		public boolean isRef();
		public String getPRED_ID();
	}
	PredicateSymbol implements PredicateInterface;
	PredicateRef	implements PredicateInterface;

	public boolean PredicateSymbol.isRef() { return false; }
	public boolean PredicateRef.isRef()	   { return true; }
}

aspect Term {
	syn boolean Term.isWildcard() = false;
	eq Wildcard.isWildcard() = true;
}

aspect Expression {
	public abstract TreeSet<Variable> Expr.variables();

	syn TreeSet<Variable> Functor.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		for (Expr e : getArgs())
			vars.addAll(e.variables());
		return vars;
	}

	syn TreeSet<Variable> Functor.freeVars() {
		TreeSet<Variable> inclbodyvars = ((Rule)literal().clause()).boundVariables();
		TreeSet<Variable> free = new TreeSet<Variable>(Term.termComparator);

		for(Variable v : variables()) {
			if(!inclbodyvars.contains(v))
				free.add(v);
		}
		return free;
	}

	syn TreeSet<Variable> Term.variables()	   = new TreeSet<Variable>(Term.termComparator);
	syn TreeSet<Variable> Variable.variables() {
		TreeSet<Variable> vars = new TreeSet<Variable>(Term.termComparator);
		vars.add(this);
		return vars;
	}
}

aspect FormalPredicate {
	syn nta List<FormalPredicate> Program.getFormalPredicateList() {
		List list = new List();
		for(PredicateInterface pred : uniquePredicateSymbols()) {
			if(!pred.isRef()) {
				FormalPredicate fp = new FormalPredicate(pred.getPRED_ID());
				list.add(fp);
			}
		}
		return list;
	}
	inh Program FormalPredicate.program();
	inh FormalPredicateMap FormalPredicate.formalPredicateMap();

	syn String FormalPredicate.predicateName() = getPRED_ID();
	syn HashSet<Literal> FormalPredicate.literals() {
		HashSet<Literal> literals = new HashSet<Literal>();
		for(PredicateSymbol ps : predicates()) {
			literals.add(ps.parentLiteral());
		}
		return literals;
	}

	inh HashSet<PredicateSymbol> FormalPredicate.predicates();
	eq Program.getFormalPredicate(int index).predicates() {
		HashSet<PredicateSymbol> predicates = new HashSet<PredicateSymbol>();
		for(PredicateInterface pi : predicateMap().get(getFormalPredicate(index).getPRED_ID())) {
			if(!pi.isRef())
				predicates.add((PredicateSymbol)pi);
		}
		return predicates;
	}

	inh HashSet<PredicateRef> FormalPredicate.predicateRefs();
	eq Program.getFormalPredicate(int index).predicateRefs() {
		HashSet<PredicateRef> predicates = new HashSet<PredicateRef>();
		for(PredicateInterface pi : predicateMap().get(getFormalPredicate(index).getPRED_ID())) {
			if(pi.isRef())
				predicates.add((PredicateRef)pi);
		}
		return predicates;
	}

	inh Program PredicateRef.program();
	inh Program PredicateSymbol.program();
	syn FormalPredicate PredicateInterface.formalpredicate() {
		FormalPredicate fp = program().formalPredicateMap().get(getPRED_ID());
		if(fp == null) {
			SimpleLogger.logger().log("Each PredicateSymbol should belong to a FormalPredicate: " + this,
									  SimpleLogger.LogLevel.Level.ERROR);
			throw new RuntimeException("Each PredicateSymbol should belong to a FormalPredicate: " + this);
		}
		return fp;
	}
}

aspect Types {
	syn boolean Term.isVariable() = false;
	eq Variable.isVariable() = true;
	syn boolean Term.isConstant() = false;
	eq Constant.isConstant() = true;
}

aspect Constraint {
	syn Expr BinaryIntegerConstraint.getLeft() = getExpr(0);
	syn Expr BinaryIntegerConstraint.getRight() = getExpr(1);
	syn Expr MATCHLiteral.getLeft() = getExpr(0);
	syn Expr MATCHLiteral.getRight() = getExpr(1);
	syn Expr BINDLiteral.getDst() = getExpr(0);
	syn Expr BINDLiteral.getSrc() = getExpr(1);
}

aspect AnalyzeBlock {
	syn boolean CommonClause.isAnalyzeBlock() = false;
	eq AnalyzeBlock.isAnalyzeBlock() = true;
	syn java.util.List<AnalyzeBlock> Program.analyzeBlocks() {
		java.util.List<AnalyzeBlock> l = new ArrayList<>();
		for (CommonClause c : getCommonClauses()) {
			if (c.isAnalyzeBlock()) {
				l.add((AnalyzeBlock) c);
			}
		}
		return l;
	}
}
