%header {:
	package lang.ast;
:};

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%goal program;


Program program =  clause.clauses+ {: return new Program(clauses); :};

Clause inner_clause = rule
                    | fact
                    ;

CommonClause clause = inner_clause
                    ;

Rule rule = lit_list.heads IMPLIED_BY lit_list.body DOT {: return new Rule(heads, body); :};
Fact fact = lit_list.heads DOT {: return new Fact(heads); :};

CommonLiteral common_literal = literal
                             | constraint
                             | pattern
                             | bounded_pattern
                             ;

Constraint constraint = neg_literal
		      | bind_literal
		      | eq_literal
		      | neq_literal
		      | lt_literal
		      | lte_literal
		      | gt_literal
		      | gte_literal
		      | match_literal
		      | ancestor_literal
		      ;

Pattern pattern = PATTERN.pat {: return new Pattern(pat); :};
BoundedPattern bounded_pattern = variable.var PATTERN {: return new BoundedPattern(PATTERN, var); :};

Literal neg_literal = NOT LPARA common_literal.lit RPARA {: lit.setNot(new Not()); return lit; :};

BINDLiteral bind_literal =
       BIND LPARA variable.var COMMA expr.right RPARA {: return new BINDLiteral(var, right); :};

EQLiteral eq_literal = EQ  LPARA expr.left COMMA expr.right RPARA {: return new EQLiteral(left, right); :};
NEQLiteral neq_literal = NEQ LPARA expr.left COMMA expr.right RPARA {: return new NEQLiteral(left, right); :};
LTLiteral lt_literal = LT  LPARA expr.left COMMA expr.right RPARA {: return new LTLiteral(left, right); :};
LTELiteral lte_literal = LTE LPARA expr.left COMMA expr.right RPARA {: return new LTELiteral(left, right); :};
GTLiteral gt_literal = GT  LPARA expr.left COMMA expr.right RPARA {: return new GTLiteral(left, right); :};
GTELiteral gte_literal = GTE LPARA expr.left COMMA expr.right RPARA {: return new GTELiteral(left, right); :};
MATCHLiteral match_literal = MATCH LPARA expr.left COMMA expr.right RPARA {: return new MATCHLiteral(left, right); :};
ANCESTORLiteral ancestor_literal = ANCESTOR LPARA expr.left COMMA expr.right RPARA {: return new ANCESTORLiteral(left, right); :}

Literal literal = pred_sym.pred LPARA term_list.terms RPARA                      {: return new Literal(pred, terms); :};

List lit_list = common_literal.lit {: return new List().add(lit); :}
              | lit_list.list COMMA common_literal.c {: return list.add(c); :}
              ;

List term_list = term_list_no_empty
               | /* epsilon */ {: return new List(); :}
               ;

List term_list_no_empty = term.t {: return new List().add(t); :}
                        | term_list_no_empty.list COMMA term.t {: return list.add(t); :}
                        ;

Expr expr = expr_term
          | functor
          ;

Functor functor = VAR_ID.id LPARA expr_list.list RPARA {: return new Functor(new FunctorSymbol(id), list); :};
List expr_list = expr_list_no_empty
               | /* epsilon */ {: return new List(); :}
               ;

List expr_list_no_empty = expr.e {: return new List().add(e); :}
                        | expr_list_no_empty.list COMMA expr.e {: return list.add(e); :}
                        ;

Expr expr_term   = add_expr
                 | sub_expr
                 | expr_factor
                 ;

Expr expr_factor = mul_expr
                 | div_expr
                 | expr_unit
                 ;

Expr expr_unit = term
               | LPARA expr.e RPARA {: return e; :}
               ;

Functor add_expr = expr_term.e1 ADD expr_factor.e2 {: Functor f = new Functor(new FunctorSymbol("add"), new List<Expr>());
                                                      f.addArg(e1); f.addArg(e2);
                                                      return f; :};
Functor sub_expr = expr_term.e1 SUB expr_factor.e2 {: Functor f = new Functor(new FunctorSymbol("sub"), new List<Expr>());
                                                      f.addArg(e1); f.addArg(e2);
                                                      return f; :};
Functor mul_expr = expr_factor.e1 MUL expr_unit.e2 {: Functor f = new Functor(new FunctorSymbol("mul"), new List<Expr>());
                                                      f.addArg(e1); f.addArg(e2);
                                                      return f; :};
Functor div_expr = expr_factor.e1 DIV expr_unit.e2 {: Functor f = new Functor(new FunctorSymbol("div"), new List<Expr>());
                                                      f.addArg(e1); f.addArg(e2);
                                                      return f; :};

Term term = variable
          | int_constant
          | string_constant
          | pred_ref
          | wildcard
          ;

Wildcard wildcard = WILDCARD {: return new Wildcard(); :};

PredicateSymbol pred_sym = PRED_ID.id  {: return new PredicateSymbol(id); :};

PredicateRef pred_ref = PRED_REF.id {: return new PredicateRef(id); :};

Variable variable = VAR_ID.id {: return new Variable(id); :};

IntConstant int_constant    = NUMERAL.num {: return new IntConstant(num); :};

StringConstant string_constant = STRING.str {: return new StringConstant(str); :};
