import lang.cons.PatternConstraint;
import java.util.TreeSet;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;
import java.util.Arrays;
import java.io.PrintStream;
import static lang.ast.Constructors.*;
import org.apache.commons.lang3.mutable.MutableInt;

aspect PatternToDatalog {

	/**
	   Assign a unique ID to every node in the AST
	*/
	private int ASTNode.UID = 0;
	public int ASTNode.getNodeId() {
		return UID;
	}

	public void ASTNode.assignIds() {
		assignIds(new MutableInt(0));
	}

	@Override public boolean ASTNode.equals(Object o) {
		if (o == null)
			return false;
		if (o.getClass() != getClass())
			return false;
		ASTNode other = (ASTNode) o;
		if (!tokens().equals(other.tokens()))
			return false;
		if (getNumChild() != other.getNumChild())
			return false;
		for (int i = 0; i < getNumChild(); ++i) {
			if ((getChild(i) == null) !=
				(other.getChild(i) == null)) {
				return false;
			} else if (getChild(i) != null && !getChild(i).equals(other.getChild(i))) {
				return false;
			}
		}
		return true;
	}

	@Override public int ASTNode.hashCode() {
		int m = 31;
		int h = getClass().hashCode();
		h = h * m + tokens().hashCode();
		for (ASTNode c : astChildren())
			if (c != null)
				h = h * m + c.hashCode();
		return h;
	}

	private void ASTNode.assignIds(MutableInt count) {
		// Assign node IDs using a depth first traversal;
		// this ensures a deterministic order for the nodes
		// inside the AST.
		for (ASTNode c : astChildren()) {
			if (c != null)
				c.assignIds(count);
		}

		UID = count.intValue();
		// reserve one UID for this node
		count.increment();
	}

	/**
	   Attributes that implement the MetaVariableTraits interface
	 */

	public static String ASTNode.GAP = "Gap";
	public static String ASTNode.METAVARIABLE = "MetaVar";

	syn String ASTNode.name() {
		String nodeNameFull = this.getClass().getName();
		String[] splitNodeName = nodeNameFull.split("\\.");
		String nodeName = splitNodeName[splitNodeName.length - 1];
		return nodeName;
	}

	public void ASTNode.debugPrintInternal(int offset, PrintStream ps) {
		for (int i = 0; i < offset; ++i)
			ps.print('_');
		ps.println(name() + " : " + varName());
		for (int i = 0; i < getNumChildNoTransform(); ++i) {
			if (getChildNoTransform(i) != null)
				getChildNoTransform(i).debugPrintInternal(offset + 2, ps);
		}
	}

	public void MetaVariable.debugPrintInternal(int offset, PrintStream ps) {
		for (int i = 0; i < offset; ++i)
			ps.print('_');
		ps.println(name() + ":" + getID());
	}

	public void ASTNode.debugPrint(PrintStream ps) {
		debugPrintInternal(0, ps);
	}

	syn String ASTNode.getRelation() = name();

	syn boolean ASTNode.isGap() {
		return name().startsWith(GAP);
	}

	syn boolean ASTNode.isMetaVar() {
		return name().startsWith(METAVARIABLE) && !name().startsWith("MetaVariable");
	}

	public static boolean ASTNode.isWildcardToken(String s) {
		return s.equals("`_") || s.equals("$_");
	}

	syn boolean MetaVariable.isWildcard() = isWildcardToken(getID());

	syn String ASTNode.varName() = varName("");
	syn String ASTNode.varName(String suffix) {
		if (isMetaVar()) {
			MetaVariable v = getMetaVariable();
			if (v == null) {
				throw new RuntimeException("All MetaVar nodes should have a MetaVariable child");
			} else if (!v.isWildcard()) {
				return v.getID() + suffix;
			}
		}
		return "v_" + getNodeId() + suffix;
	}

	syn MetaVariable ASTNode.getMetaVariable() {
		if (isMetaVar()) {
			try {
				Method m = this.getClass().getMethod("getVar");
				MetaVariable v = (MetaVariable) m.invoke(this);
				return v;
			} catch (ReflectiveOperationException e) {
				return null;
			}
		}
		return null;
	}

	syn String ASTNode.indexVarName() {
		return "i_" + getNodeId();
	}

	static boolean ASTNode.isMetaVarToken(String token) {
		return java.util.regex.Pattern.matches("[$`][\\p{Alpha}_][\\p{Alnum}_]*", token);
	}

	ASTNode implements ObjLangASTNode;

	syn ArrayList<PatternConstraint> List.constraints() {
		if (getNumChild() == 0) {
			return new ArrayList<>();
		}

		ArrayList<PatternConstraint> cons = new ArrayList<>();
		ASTNode prevNonGap = null;
		ASTNode prev = null;
		boolean seenGap = false;

		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode c = getChild(i);
			if (!c.isGap()) {
				if (!seenGap) {
					// no gaps seen from the beginning, then the index variable
					// is constrained to be equal to the position in the list
					cons.add(PatternConstraint.eq(c, i));
				} else if (prev == prevNonGap) {
					// seen gaps, but the predecessor is not a gap
					// e.g. P(...,$i:t,$j:u,...) -> constrain $i + 1 == $j
					cons.add(PatternConstraint.next(prev, c));
				} else if (prevNonGap != null) {
					// seen gaps, but the predecessor is a gap
					// e.g. P(...,$i:t,...,$j:u,...)
					// There are two alternatives to chosse from:
					// 1. constrain $j > $i
					// 2. no constraint
					// We choose to implement 2 to allow a pattern like
					// ... :- ..., EQ(x, y), ..., $p(...),... . to cover cases
					// where EQ comes before $p and after $p. If ordering is
					// required, the user can add explicit indices.
					cons.add(PatternConstraint.member(c));
				} else if (prevNonGap == null) {
					// seens only gaps before
					cons.add(PatternConstraint.member(c));
				}

				if (i + 1 == getNumChild()) {
					// this is the rightmost element in a list with gaps
					// e.g. P(...,$i:t) -> constrain $i to be the index of the last element
					cons.add(PatternConstraint.last(c));
				}
			}

			if (!c.isGap()) {
				prevNonGap = c;
			} else {
				seenGap = true;
			}
			prev = c;
		}
		return cons;
	}

	static private Set<String> ASTNode.nonFinalNodeTypes = PatternGrammarInfo.getNonFinalNodeTypes();
	syn lazy boolean ASTNode.hasFinalTypeInParent() {
		ASTNode parent = getParent();
		ASTNode child = this;

		if (parent == null)
			return false;

		while (parent.name().equals("Opt") || parent.name().equals("List")) {
			parent = parent.getParent();
			child = child.getParent();
		}

		if (parent == null)
			return false;

		int indexInParent = parent.getIndexOfChild(child);
		String typeInParent = PatternGrammarInfo.childNodeType(parent.name(), indexInParent);

		if (typeInParent == null) {
			// unknown type in parent, be conservative.
			return false;
		} else if (nonFinalNodeTypes.contains(typeInParent)) {
			// the type in the parent has derived subtypes, so the concrete type
			// of these node may add some information
			return false;
		}
		return true;
	}

	syn lazy boolean ASTNode.isTrivial() {
		if (isMetaVar())
			return false;

		ASTNode parent = getParent();
		int indexInParent = parent.getIndexOfChild(this);

		for (int i = 0; i < getNumChild(); ++i) {
			if (!getChild(i).isTrivial())
				return false;
		}

		for (String t : tokens()) {
			if (!isWildcardToken(t))
				return false;
		}

		// if the declared type of this node does not have further subtypes,
		// then emiting its type is not providing new information
		return hasFinalTypeInParent();
	}

	eq Opt.isTrivial() {
		return getNumChild() == 0;
	}

	eq List.isTrivial() {
		if (getNumChild() == 0)
			return true;
		for (ASTNode c : astChildren()) {
			if (!c.isGap())
				return false;
		}
		// all children, if any, are gaps
		return true;
	}
	//	syn lazy boolean ASTNode.isTrivial() = false;

	public void ASTNode.metaVarLiterals2(AnalyzeContext ctx, lang.ast.CommonVariable root,
										 java.util.List<lang.ast.CommonLiteral> lits) {
		assert isMetaVar();
		String relName = getRelation().substring(ASTNode.METAVARIABLE.length());
		// the literal builder builds a variable if kind is prefixed by $, otherwise a string literal.
		String kind;
		if (hasFinalTypeInParent()) {
			// the matched node can have only one type, so we can
			// fix it in the literal, instead of providing an upper bound
			// using the SUPERTYPE predicate
			kind = relName;
		} else {
			// constrain the type of node that can be matched
			kind = "$" + varName("_kind");
			lits.add(literal(ctx.prefix("SUPERTYPE"), kind, relName));
		}
		boolean anyChildLiterals = false;
		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);
			if (child == null)
				continue;

			// MetaVariable children hold the metavarible ID and nothing else.
			// They should be ignored here.
			if (child instanceof MetaVariable)
				continue;

			anyChildLiterals = true;
			lits.add(literal(ctx.progRelName, kind, var(varName()), i, var(child.varName()), "_"));
			if (!child.isTrivial())
				child.literals2(ctx, null, lits);
		}

		if (!anyChildLiterals) {
			// This metavariable node has no children. Just ensure that is bound to
			// the correct AST node type
			lits.add(literal(ctx.progRelName, kind,  var(varName()), "_", "_", "_"));
		}

		if (root != null) {
			// This is an a <: `b :> pattern. In this case, we need to ensure that a == b.
			lits.add(literal(ctx.progRelName, kind,  var(varName()), "_", "_", "_"));
			lits.add(literal(ctx.progRelName, kind, root.treeCopyNoTransform(), "_", "_", "_"));
			lits.add(EQ(new lang.ast.Variable(varName()),
					   root.treeCopyNoTransform()));
		}
	}

	public void ASTNode.literals2(AnalyzeContext ctx, lang.ast.CommonVariable root,
								  java.util.List<lang.ast.CommonLiteral> lits) {
		if (isGap()) {
			// gaps are handled by their parent, List
			return;
		} else if (isMetaVar()) {
			// metavariable AST node
			metaVarLiterals2(ctx, root, lits);
			return;
		}

		int childIndex = getNumChild();
		boolean literalForThisNode = false;
		for (Pair<String, String> t : namedTokens()) {
			String varName = isMetaVarToken(t.getRight()) ? t.getRight() : ("t_" + UID + "_" + childIndex);
			if (!isWildcardToken(t.getRight())) {
				// Add a tuple to the current node relation
				lits.add(literal(ctx.progRelName, str(name()), root != null ? root : var(varName()), childIndex, var(varName), "_"));
				// Add a tuple to Terminal relation
				lits.add(literal(ctx.progRelName, t.getLeft(), var(varName), "_", "_", isMetaVarToken(t.getRight()) ? "_" : str(t.getRight())));
				literalForThisNode = true;
			}
			childIndex++;
		}

		for (int i = 0; i < getNumChild(); ++i) {
			ASTNode child = getChild(i);
			if (!child.isTrivial()) {
				lits.add(literal(ctx.progRelName, str(name()), root != null ? root : var(varName()), i , var(child.varName()), "_"));
				child.literals2(ctx, null, lits);
				literalForThisNode = true;
			}
		}

		if (!literalForThisNode) {
			// This node has no children, but it exists in the tree. Emit that.
			lits.add(literal(ctx.progRelName, str(name()), root != null ? root : var(varName()), "_", "_", "_"));
		}
	}

	@Override public void Opt.literals2(AnalyzeContext ctx, lang.ast.CommonVariable root,
										java.util.List<lang.ast.CommonLiteral> lits) {
		assert !isTrivial();
		super.literals2(ctx, root, lits);
	}

	@Override public void List.literals2(AnalyzeContext ctx, lang.ast.CommonVariable root,
										 java.util.List<lang.ast.CommonLiteral> lits) {
		assert !isTrivial();

		ArrayList<PatternConstraint> cons = constraints();
		if (cons.isEmpty()) {
			// a list with no gaps
			for (int i = 0; i < getNumChild(); ++i) {
				ASTNode child = getChild(i);
				lits.add(literal(ctx.progRelName, str(name()), var(varName()), i, var(child.varName()), "_"));
				child.literals2(ctx, null, lits);
			}
		} else {
			// generate any constraints
			for (PatternConstraint c : cons)
				lits.addAll(c.generateLiterals(ctx));
			// traverse the children
			for (int i = 0; i < getNumChild(); ++i) {
				ASTNode child = getChild(i);
				child.literals2(ctx, null, lits);
			}
		}
	}

	syn lazy ArrayList<lang.ast.CommonLiteral> ASTNode.literals(AnalyzeContext ctx, lang.ast.CommonVariable root) {
		// An add-hoc way of implementing parameterized collection attributes
		ArrayList<lang.ast.CommonLiteral> list = new ArrayList<>();
		literals2(ctx, root, list);
		return list;
	}

	syn TreeSet<String> ASTNode.metavariables() {
		TreeSet<String> vars = new TreeSet<>();
		for (ASTNode c : astChildren()) {
			if (c != null)
				// Gaps might have null children, because the inherit from
				// the original AST node, skip them
				vars.addAll(c.metavariables());
		}
		for (String t : tokens()) {
			// Collect any tokens that are a metavariable
			if (isMetaVarToken(t) && !isWildcardToken(t))
				vars.add(t);
		}
		return vars;
	}

	eq MetaVariable.metavariables() {
		TreeSet<String> vars = new TreeSet<>();
		if (isWildcard()) {
			// This a wildcard, don't add any metavariable for it
			return vars;
		}

		vars.add(getID());
		return vars;
	}
}
