import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;
import java.util.Arrays;

aspect LanguageSpecific {
	@Override public java.util.List<Pair<String, String>> ArrayTypeAccess.namedTokens() {
		// ArrayTypeAccess : TypeAccess ::= /<Package:String>/ /<ID:String>/ Access;
		// ArrayTypeAccess overrides the Package and ID tokens with
		// nonterminal tokens. These means that those tokens are not
		// properties of the ArrayTypeAccess nodes.
		return Collections.emptyList();
	}

	@Override public java.util.List<Pair<String, String>> ParseName.namedTokens() {
		return nameParts.stream().map(np -> Pair.of("Token.ParseName", np.toString())).collect(Collectors.toList());
	}

	public static java.util.List<lang.ast.Clause> PatLang.makeAttributeRule(AnalyzeContext ctx, String attrName, String predName) {
		return Arrays.asList(rule(
								  literal(predName, "$n", "$t"),
								  literal(ctx.attrRelName, str(attrName), "$n", "$t")
								  ));
	}

	public static lang.ast.Rule PatLang.makeASTRule(AnalyzeContext ctx) {
		return rule(
					literal("AST", "$p1", "$p2", "$p3", "$p4", "$p5"),
					literal(ctx.progRelName, "$p1", "$p2", "$p3", "$p4", "$p5"));
	}

	public static java.util.List<lang.ast.Clause> PatLang.generateHelperRelations(AnalyzeContext ctx, Set<String> used) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();
		// Identifiers
		if (used.contains("ID")) {
			ret.add(makeIdentifierRule(ctx, "IdUse", "ID", "ID"));
			ret.add(makeIdentifierRule(ctx, "ParseName", "Token.ParseName", "ID"));
			ret.add(makeIdentifierRule(ctx, "EnumConstant", "ID", "ID"));
			ret.add(makeIdentifierRule(ctx, "FieldDeclarator", "ID", "ID"));
			ret.add(makeIdentifierRule(ctx, "VariableDeclarator", "ID", "ID"));
			ret.add(makeIdentifierRule(ctx, "VarAccess", "ID", "ID"));
			ret.add(makeIdentifierRule(ctx, "TypeAccess", "ID", "ID"));
			ret.add(makeTerminalToIdentifierRule(ctx, "ID", "ID"));
		}
		// Labels
		if (used.contains("LABEL")) {
			ret.add(makeIdentifierRule(ctx, "LabeledStmt", "Label", "LABEL"));
			ret.add(makeIdentifierRule(ctx, "BreakStmt", "Label", "LABEL"));
			ret.add(makeIdentifierRule(ctx, "ContinueStmt", "Label", "LABEL"));
		}
		// Packages for qualified names
		if (used.contains("PACKAGE")) {
			ret.add(makeIdentifierRule(ctx, "TypeAccess", "Package", "PACKAGE"));
			ret.add(makeIdentifierRule(ctx, "PrimitiveTypeAccess", "Package", "PACKAGE"));
		}
		// Modifiers
		if (used.contains("MOD"))
			ret.add(makeIdentifierRule(ctx, "Modifier", "ID", "MOD"));
		// Literals
		if (used.contains("CHAR"))
			ret.add(makeIdentifierRule(ctx, "CharacterLiteral", "LITERAL", "CHAR"));
		if (used.contains("BOOLEAN"))
			ret.add(makeIdentifierRule(ctx, "BooleanLiteral", "LITERAL", "BOOLEAN"));
		if (used.contains("STRING"))
			ret.add(makeIdentifierRule(ctx, "StringLiteral", "LITERAL", "STRING"));
		if (used.contains("NULL"))
			ret.add(makeIdentifierRule(ctx, "NullLiteral", "LITERAL", "NULL"));
		if (used.contains("INT"))
			ret.add(makeIdentifierRule(ctx, "IntegerLiteral", "LITERAL", "INT"));
		if (used.contains("LONG"))
			ret.add(makeIdentifierRule(ctx, "LongLiteral", "LITERAL", "LONG"));
		if (used.contains("FLOAT"))
			ret.add(makeIdentifierRule(ctx, "FloatingPointLiteral", "LITERAL", "FLOAT"));
		if (used.contains("DOUBLE"))
			ret.add(makeIdentifierRule(ctx, "DoubleLiteral", "LITERAL", "DOUBLE"));
		// Insert a relation to represent the source location of the node
		// represented by a metavariable
		if (used.contains("SRC"))
			ret.add(makeSrcInfoRule(ctx));
		// Insert a relation to map nodes to their position inside a list
		if (used.contains("INDEX"))
			ret.add(makeIndexRule(ctx));
		// Insert a relation to map nodes to their children
		if (used.contains("PARENT"))
			ret.add(makeParentRule(ctx));
		// Insert predicates that expose ExtendJ attributes
		// Insert the TYPE relation
		if (used.contains("TYPE"))
			ret.addAll(makeAttributeRule(ctx, "type", "TYPE"));
		// Insert the DECL relation
		if (used.contains("DECL"))
			ret.addAll(makeAttributeRule(ctx, "decl", "DECL"));
		// Insert the GENERIC rule, map a concrete instance of a generic type
		// to the declaration of the generic type.
		if (used.contains("GENERIC"))
			ret.addAll(makeAttributeRule(ctx, "genericDecl", "GENERIC"));
		// Insert a rule for declaring a node's supertypes
		if (used.contains("SUPERTYPE"))
			ret.addAll(makeSuperTypeRelation(ctx));
		// Expose the AST relation
		if (used.contains("AST"))
			ret.add(makeASTRule(ctx));
		if (used.contains("PROVENANCE"))
			ret.add(makeProvenanceRule(ctx));

		return ret;
	}

	public static lang.ast.PredicateType PatLang.contextPredicateType(String predName) {
		switch (predName) {
		case "ID":
		case "MOD":
		case "CHAR":
		case "BOOLEAN":
		case "STRING":
		case "NULL":
		case "INT":
		case "LONG":
		case "FLOAT":
		case "DOUBLE":
		case "LABEL":
		case "PACKAGE":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.StringType.get());
		case "SRC":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.StringType.get());
		case "INDEX":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get());
		case "EXISTS":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get());
		case "PARENT":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.ASTNodeType.get());
		case "TYPE":
		case "DECL":
		case "GENERIC":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.ASTNodeType.get());
		case "AST":
			return new lang.ast.PredicateType(lang.ast.StringType.get(),
											  lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.ASTNodeType.get(),
											  lang.ast.StringType.get());
		case "PROVENANCE":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.ASTNodeType.get());
		default:
			return null;
		}
	}
}
