import se.lth.sep.*;
import beaver.Symbol;
import java.io.PrintStream;
import java.util.ArrayList;
import org.apache.commons.lang3.tuple.Pair;
import java.util.Collections;


aspect ASTBuilder {
	public class ASTBuilder extends lang.ast.ASTBuilder {
		@Override protected void addGrammarRules(Grammar grammar) {
			ObjLangParserSEP.addRules1(grammar);
			ObjLangParserSEP.addRules2(grammar);
		}

		private static ASTBuilder instance;

		public static ASTBuilder getInstance() {
			if (instance == null) {
				instance = new ASTBuilder();
			}
			return instance;
		}
	}


	syn String ASTNode.name() {
		String nodeNameFull = this.getClass().getName();
		String[] splitNodeName = nodeNameFull.split("\\.");
		String nodeName = splitNodeName[splitNodeName.length - 1];
		return nodeName;
	}


	public void ASTNode.debugPrintInternal(int offset, PrintStream ps) {
		final String bar = "\u2514--";
		for (int i = 0; i < offset - bar.length() - 1; ++i)
			ps.print(' ');
		if (offset >= bar.length()) {
			ps.print(bar);
		}
		ps.println(name() + " <" + prettyLoc() + ">");
		for (int i = 0; i < getNumChildNoTransform(); ++i) {
			if (getChildNoTransform(i) != null)
				getChildNoTransform(i).debugPrintInternal(offset + 3, ps);
		}
	}

	public int ASTNode.startLine() {
		return getLine(getStart());
	}

	public int ASTNode.endLine() {
		return getLine(getEnd());
	}

	public int ASTNode.startColumn() {
		return getColumn(getStart());
	}

	public int ASTNode.endColumn() {
		return getColumn(getEnd());
	}

	public String ASTNode.prettyLoc() {
		return "" + startLine() + ":" + startColumn() + "-" + endLine() + ":" + endColumn();
	}

	public void ASTNode.debugPrint(PrintStream ps) {
		debugPrintInternal(0, ps);
	}
}
