import se.lth.sep.*;
import beaver.Symbol;
import java.io.PrintStream;
import java.util.ArrayList;
import org.apache.commons.lang3.tuple.Pair;
import java.util.Collections;


aspect ASTBuilder {
	public class ASTBuilder implements lang.ast.ASTBuilder {
		public Symbol buildAST(final ParseTree t, final java.util.List<Symbol> symbols) {
			if (t.getCategory().isTerminal()) {
				// this is a terminal, return the corresponding symbol
				assert t.getStart() + 1 == t.getEnd();
				return symbols.get(t.getStart());
			}

			java.util.List<Object> astChildren = new ArrayList<>();
			java.util.List<ParseTree> children = t.getChildren();

			se.lth.sep.Rule r = t.getRule();

			if (r.getBody().size() == 0) {
				// epsilon
				assert children.size() == 1 && children.get(0).getCategory().equals(grammar.t_EPSILON);
				astChildren = Collections.emptyList();
			} else {
				assert children.size() == r.getBody().size();
				for (int i = 0; i < children.size(); ++i) {
					Category actual = children.get(i).getCategory();
					Category staticCat = r.getBody().get(i);

					Symbol astChild = buildAST(children.get(i), symbols);

					assert staticCat == actual;
					assert astChild != null;
					astChildren.add(astChild);
				}
			}

			Symbol ret = (Symbol) r.getAction().act(astChildren);
			return ret;
		}

		private Grammar grammar;
		private EarleyParser parser;

		private ASTBuilder() {
			grammar = new Grammar();
			ObjLangParserSEP.addRules1(grammar);
			ObjLangParserSEP.addRules2(grammar);
			parser = new EarleyParser(grammar);
		}

		private static ASTBuilder instance;
		public static ASTBuilder getInstance() {
			if (instance == null) {
				instance = new ASTBuilder();
			}
			return instance;
		}

		public Grammar getGrammar() {
			return grammar;
		}

		public EarleyParser getParser() {
			return parser;
		}
	}


	syn String ASTNode.name() {
		String nodeNameFull = this.getClass().getName();
		String[] splitNodeName = nodeNameFull.split("\\.");
		String nodeName = splitNodeName[splitNodeName.length - 1];
		return nodeName;
	}


	public void ASTNode.debugPrintInternal(int offset, PrintStream ps) {
		final String bar = "\u2514--";
		for (int i = 0; i < offset - bar.length() - 1; ++i)
			ps.print(' ');
		if (offset >= bar.length()) {
			ps.print(bar);
		}
		ps.println(name() + " <" + prettyLoc() + ">");
		for (int i = 0; i < getNumChildNoTransform(); ++i) {
			if (getChildNoTransform(i) != null)
				getChildNoTransform(i).debugPrintInternal(offset + 3, ps);
		}
	}

	public int ASTNode.startLine() {
		return getLine(getStart());
	}

	public int ASTNode.endLine() {
		return getLine(getEnd());
	}

	public int ASTNode.startColumn() {
		return getColumn(getStart());
	}

	public int ASTNode.endColumn() {
		return getColumn(getEnd());
	}

	public String ASTNode.prettyLoc() {
		return "" + startLine() + ":" + startColumn() + "-" + endLine() + ":" + endColumn();
	}

	public void ASTNode.debugPrint(PrintStream ps) {
		debugPrintInternal(0, ps);
	}
}
