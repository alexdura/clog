import java.util.ArrayList;
import clang.ASTMatcher;
import clang.AST.*;

aspect Types {
	syn java.util.List<ConcreteDeclaration> Declaration.decls() {
		java.util.List<ConcreteDeclaration> ret = new ArrayList<>();

		for (InitDeclarator id : this.getInitDeclarators()) {
			Declarator d = id.getDeclarator();

			ret.add(new ConcreteDeclaration(this.getDeclarationSpecifiers().treeCopy(), d.treeCopy()));
		}

		return ret;
	}

	syn Identifier ConcreteDeclaration.declaredIdentifier() = getDeclarator().declaredIdentifier();
	syn Identifier Declarator.declaredIdentifier() = null;

	eq IdentifierDeclarator.declaredIdentifier() = getIdentifier();
	eq PointerDeclarator.declaredIdentifier() = getDeclarator().declaredIdentifier();
	eq ArrayDeclarator.declaredIdentifier() = getDeclarator().declaredIdentifier();
	eq ArrayDeclaratorVLA.declaredIdentifier() = getDeclarator().declaredIdentifier();
	eq FunctionDeclarator.declaredIdentifier() = getDeclarator().declaredIdentifier();

	syn AbstractDeclaration ConcreteDeclaration.asAbstract() = new AbstractDeclaration(getDeclarationSpecifiers().treeCopy(),
																					   getDeclarator().asAbstract());
	syn Opt<AbstractDeclarator> Declarator.asAbstract() = new Opt<>();

	eq IdentifierDeclarator.asAbstract() = new Opt<>();
	eq PointerDeclarator.asAbstract() = new Opt<>(new AbstractPointerDeclarator(getDeclarator().asAbstract(), getTypeQualifiers().treeCopy()));
	eq ArrayDeclarator.asAbstract() = new Opt<>(new AbstractArrayDeclarator(getDeclarator().asAbstract(), getTypeQualifiers().treeCopy(),
																			getExpressionOpt().treeCopy(), getStaticOpt().treeCopy()));
	eq ArrayDeclaratorVLA.asAbstract() = new Opt<>(new AbstractArrayDeclaratorVLA(getDeclarator().asAbstract(), getTypeQualifiers().treeCopy()));
	eq FunctionDeclarator.asAbstract() {
		List<ParameterType> abstractParams = new List<>();
		for (ParameterType pDecl : getParameterTypes()) {
			abstractParams.add(pDecl.asAbstract());
		}
		return new Opt<>(new AbstractFunctionDeclarator(getDeclarator().asAbstract(), abstractParams));
	}

	syn ParameterType ParameterType.asAbstract() = null;
	eq ParameterDeclaration.asAbstract() = new AbstractParameterDeclaration(getDeclarationSpecifiers().treeCopy(),
																			getDeclarator().asAbstract());
	eq AbstractParameterDeclaration.asAbstract() = this.treeCopy();
	eq ParameterVarArgType.asAbstract() = this.treeCopy();
}

aspect ASTMatcher {
	syn ASTMatcher ASTNode.matcher() {
		if (isMetaVar()) {
			return this.astMatcherMetaVariable().bind(varName());
		}
		return this.astMatcher();
	}

	syn ASTMatcher ASTNode.astMatcher() {
		throw new RuntimeException("genMatcher() not defined for " + this.getClass());
	}

	syn ASTMatcher ASTNode.astMatcherMetaVariable() {
		throw new RuntimeException("genMatcher() not defined for " + this.getClass());
	}

	eq ForStatement.astMatcherMetaVariable() {
		return ASTMatcher.forStmt(Collections.emptyList());
	}

	eq Expression.astMatcherMetaVariable() {
		return ASTMatcher.expr(Collections.emptyList());
	}

	eq Statement.astMatcherMetaVariable() {
		return ASTMatcher.stmt(Collections.emptyList());
	}

	eq ForStatement.astMatcher() {
		java.util.List<ASTMatcher> matchers = new ArrayList<>();
		Statement init = this.getInit();
		matchers.add(ASTMatcher.hasLoopInit(init != null ? init.matcher() : ASTMatcher.nullStmt()));

		Statement cond = this.getCond();
		matchers.add(ASTMatcher.hasCondition(cond != null ? cond.matcher() : ASTMatcher.nullStmt()));

		Statement update = this.getUpdate();
		matchers.add(ASTMatcher.hasIncrement(update != null ? update.matcher() : ASTMatcher.nullStmt()));

		Statement body = this.getStatement();
		matchers.add(ASTMatcher.hasBody(body.matcher()));

		return ASTMatcher.forStmt(matchers);
	}

	eq WhileStatement.astMatcher() {
		return ASTMatcher.whileStmt(java.util.List.of(this.getExpression().matcher(), this.getStatement().matcher()));
	}

	eq DoWhileStatement.astMatcher() {
		return ASTMatcher.doStmt(java.util.List.of(this.getExpression().matcher(), this.getStatement().matcher()));
	}

	eq EmptyStatement.astMatcher() {
		return ASTMatcher.nullStmt();
	}

	eq DeclarationStatement.astMatcher() {
		return ASTMatcher.declStmt(ASTMatcher.has(getDeclarationOrDefinition().astMatcher()));
	}

	eq Declaration.astMatcher() {
		return ASTMatcher.decl();
	}
}
