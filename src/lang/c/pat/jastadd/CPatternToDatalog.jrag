import java.util.TreeSet;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.Collections;
import lang.cons.ObjLangASTNode;
import java.lang.reflect.Method;
import java.lang.ReflectiveOperationException;
import lang.ast.AnalyzeContext;
import lang.io.StringUID;

aspect LanguageSpecific {
	public static java.util.List<lang.ast.Clause> PatLang.generateHelperRelations(AnalyzeContext ctx, Set<String> used) {
		java.util.List<lang.ast.Clause> ret = new java.util.ArrayList<>();

		// Add two new rules, to map variables and predicates to their predicates
		// if (used.contains("ID")) {
		// 	ret.add(makeIdentifierRule(ctx, "Variable", "VAR_ID", "ID"));
		// 	ret.add(makeIdentifierRule(ctx, "PredicateSymbol", "PRED_ID", "ID"));
		// 	ret.add(makeIdentifierRule(ctx, "FunctorSymbol", "FUNC_ID", "ID"));
		//}
 		// if (used.contains("INT"))
		// 	ret.add(makeIdentifierRule(ctx, "IntConstant", "NUMERAL", "INT", "to_number"));
		// if (used.contains("STR"))
		// 	ret.add(makeIdentifierRule(ctx, "StringConstant", "STRING", "STR"));
		// if (used.contains("REF"))
		// 	ret.add(makeIdentifierRule(ctx, "PredicateRef", "PRED_ID", "REF"));

		// Insert a relation to represent the source location of the node
		// represented by a metavariable
		if (used.contains("SRC"))
			ret.add(makeSrcInfoRule(ctx));

		// Insert a relation to map nodes to their position inside a list
		if (used.contains("INDEX"))
			ret.add(makeIndexRule(ctx));

		// Insert a relation to map nodes to their children
		if (used.contains("PARENT"))
			ret.add(makeParentRule(ctx));

		// Insert a rule for declaring a node's supertypes
		if (used.contains("SUPERTYPE"))
			ret.addAll(makeSuperTypeRelation(ctx));

		if (used.contains("AST"))
			ret.add(makeASTRule(ctx));

		return ret;
	}

	public static lang.ast.PredicateType PatLang.contextPredicateType(String predName) {
		switch (predName) {
		// case "INT":
		// 	return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
		// 									  lang.ast.IntegerType.get());
		// case "STR":
		// case "ID":
		// case "REF":
		// 	return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
		// 									  lang.ast.StringType.get());
		case "SRC":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.StringType.get());
		case "INDEX":
			return new lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get());
		case "PARENT":
			return new  lang.ast.PredicateType(lang.ast.ASTNodeType.get(),
											   lang.ast.ASTNodeType.get());
		case "AST":
			return new lang.ast.PredicateType(lang.ast.StringType.get(),
											  lang.ast.ASTNodeType.get(),
											  lang.ast.IntegerType.get(),
											  lang.ast.ASTNodeType.get(),
											  lang.ast.StringType.get());

		default: return null;
		}
	}
}
