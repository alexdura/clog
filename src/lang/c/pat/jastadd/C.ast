TranslationUnit ::= DeclarationOrDefinition*;

Identifier ::= <ID>;
Constant;
StringLiteral;

// A.2.4 External definitions
// (6.9) translation-unit:
// external-declaration
// translation-unit external-declaration

abstract DeclarationOrDefinition;
FunctionDefinition : DeclarationOrDefinition ::= DeclarationSpecifier* Declarator Declaration* Statement;

// (6.9) external-declaration:
// function-definition
// declaration
// (6.9.1) function-definition:
// declaration-specifiers declarator declaration-listopt compound-statement
// (6.9.1) declaration-list:
// declaration
// declaration-list declaration

// A.2.1 Expressions
// (6.5.1) primary-expression:
// identifier
// constant
// string-literal
// ( expression )
// generic-selection // TODO

abstract Expression : Statement;
IdentifierExpression : Expression ::= Identifier;
ConstantExpression : Expression ::= Constant;
StringLiteralExpression : Expression ::= StringLiteral;

// (6.5.1.1) generic-selection: TODO
// _Generic ( assignment-expression , generic-assoc-list )

// (6.5.1.1) generic-assoc-list:
// generic-association
// generic-assoc-list , generic-association

// (6.5.1.1) generic-association:
// type-name : assignment-expression
// default : assignment-expression

// (6.5.2) postfix-expression:
// primary-expression
// postfix-expression [ expression ]
// postfix-expression ( argument-expression-list opt )
// postfix-expression . identifier
// postfix-expression -> identifier
// postfix-expression ++
// postfix-expression --
// ( type-name ) { initializer-list }
// ( type-name ) { initializer-list , }

ArrayIndexExpression : Expression ::= Base:Expression Index:Expression;
CallExpression : Expression ::= Callee:Expression Args:Expression*;
MemberExpression : Expression ::= Expression Identifier;
PointerMemberExpression : Expression ::= Expression Identifier;
PostIncrementExpression : Expression ::= Expression;
PostDecrementExpression : Expression ::= Expression;
InitializerListExpression : Expression ::= TypeName Initializer*;

// (6.5.2) argument-expression-list:
// assignment-expression
// argument-expression-list , assignment-expression

// (6.5.3) unary-expression:
// postfix-expression
// ++ unary-expression
// -- unary-expression
// unary-operator cast-expression
// sizeof unary-expression
// sizeof ( type-name )
// alignof ( type-name )
PreIncrementExpression : Expression ::= Expression;
PreDecrementExpression : Expression ::= Expression;
SizeofExpressionExpression : Expression ::= Expression;
SizeofTypeExpression : Expression ::= TypeName;
AlignofExpression : Expression ::= TypeName;
AddressOfExpression : Expression ::= Expression;
PointerDereferenceExpression : Expression ::= Expression;
UnaryPlusExpression : Expression ::= Expression; // does not add any semantic value
UnaryMinusExpression : Expression ::= Expression;
BitwiseNotExpression : Expression ::= Expression;
NotExpression : Expression ::= Expression;

// (6.5.3) unary-operator: one of
// & * + - ~ !

// (6.5.4) cast-expression:
// unary-expression
// ( type-name ) cast-expression
CastExpression : Expression ::= TypeName Expression;

// (6.5.5) multiplicative-expression:
// cast-expression
// multiplicative-expression * cast-expression
// multiplicative-expression / cast-expression
// multiplicative-expression % cast-expression
abstract BinaryExpression : Expression ::= Left:Expression Right:Expression;

MulExpression : BinaryExpression;
DivExpression : BinaryExpression;
ModExpression : BinaryExpression;

// (6.5.6) additive-expression:
// multiplicative-expression
// additive-expression + multiplicative-expression
// additive-expression - multiplicative-expression
AddExpression : BinaryExpression;
SubExpression : BinaryExpression;

// (6.5.7) shift-expression:
// additive-expression
// shift-expression << additive-expression
// shift-expression >> additive-expression
LShiftExpression : BinaryExpression;
RShiftExpression : BinaryExpression;

// (6.5.8) relational-expression:
// shift-expression
// relational-expression < shift-expression
// relational-expression > shift-expression
// relational-expression <= shift-expression
// relational-expression >= shift-expression
LTExpression : BinaryExpression;
LEQExpression : BinaryExpression;
GTExpression : BinaryExpression;
GEQExpression : BinaryExpression;

// (6.5.9) equality-expression:
// relational-expression
// equality-expression == relational-expression
// equality-expression != relational-expression
EQExpression : BinaryExpression;
NEQExpression : BinaryExpression;

// (6.5.10) AND-expression:
// equality-expression
// AND-expression & equality-expression
BitwiseAndExpression : BinaryExpression;

// (6.5.11) exclusive-OR-expression:
// AND-expression
// exclusive-OR-expression ^ AND-expression
BitwiseXorExpression : BinaryExpression;

// (6.5.12) inclusive-OR-expression:
// exclusive-OR-expression
// inclusive-OR-expression | exclusive-OR-expression
BitwiseOrExpression : BinaryExpression;

// (6.5.13) logical-AND-expression:
// inclusive-OR-expression
// logical-AND-expression && inclusive-OR-expression
AndExpression : BinaryExpression;

// (6.5.14) logical-OR-expression:
// logical-AND-expression
// logical-OR-expression || logical-AND-expression
OrExpression : BinaryExpression;

// (6.5.15) conditional-expression:
// logical-OR-expression
// logical-OR-expression ? expression : conditional-expression
ConditionalExpression : Expression ::= Cond:Expression Then:Expression Else:Expression;

// (6.5.16) assignment-expression:
// conditional-expression
// unary-expression assignment-operator assignment-expression
AssignmentExpression : BinaryExpression;
AssignmentMulExpression : BinaryExpression;
AssignmentDivExpression : BinaryExpression;
AssignmentModExpression : BinaryExpression;
AssignmentAddExpression : BinaryExpression;
AssignmentSubExpression : BinaryExpression;
AssignmentLShiftExpression : BinaryExpression;
AssignmentRShiftExpression : BinaryExpression;
AssignmentAndExpression : BinaryExpression;
AssignmentXorExpression : BinaryExpression;
AssignmentOrExpression : BinaryExpression;

// (6.5.16) assignment-operator: one of
// = *= /= %= += -= <<= >>= &= ^= |=

// (6.5.17) expression:
// assignment-expression
// expression , assignment-expression
CommaExpression : BinaryExpression;

// (6.6) constant-expression:
// conditional-expression

// A.2.2 Declarations
// (6.7) declaration:
// declaration-specifiers init-declarator-list opt ;
// static_assert-declaration : TODO
Declaration : DeclarationOrDefinition ::= DeclarationSpecifier* InitDeclarator* ;

// (6.7) declaration-specifiers:
// storage-class-specifier declaration-specifiersopt
// type-specifier declaration-specifiersopt
// type-qualifier declaration-specifiersopt
// function-specifier declaration-specifiersopt
// alignment-specifier declaration-specifiersopt
abstract DeclarationSpecifier;
abstract StorageClassSpecifier : DeclarationSpecifier;
abstract TypeSpecifier : DeclarationSpecifier;
abstract TypeQualifier : DeclarationSpecifier;
abstract FunctionSpecifier : DeclarationSpecifier;
abstract AlignmentSpecifier : DeclarationSpecifier;

// (6.7) init-declarator-list:
// init-declarator
// init-declarator-list , init-declarator

// (6.7) init-declarator:
// declarator
// declarator = initializer
InitDeclarator ::= Declarator [Initializer];

// (6.7.1) storage-class-specifier:
// typedef
// extern
// static
// _Thread_local
// auto
// register
Typedef : StorageClassSpecifier;
Extern : StorageClassSpecifier;
Static : StorageClassSpecifier;
ThreadLocal : StorageClassSpecifier;
Auto : StorageClassSpecifier;
Register : StorageClassSpecifier;

// (6.7.2) type-specifier:
// void
// char
// short
// int
// long
// float
// double
// signed
// unsigned
// _Bool
// _Complex
// atomic-type-specifier
// struct-or-union-specifier
// enum-specifier
// typedef-name
Void : TypeSpecifier;
Char : TypeSpecifier;
Short : TypeSpecifier;
Int : TypeSpecifier;
Long : TypeSpecifier;
Float : TypeSpecifier;
Double : TypeSpecifier;
Signed : TypeSpecifier;
Unsigned : TypeSpecifier;
Bool : TypeSpecifier;
Complex : TypeSpecifier;

// (6.7.2.1) struct-or-union-specifier:
// struct-or-union identifieropt { struct-declaration-list }
// struct-or-union identifier
abstract StructOrUnionSpecifier : TypeSpecifier ::= [Identifier] StructDeclaration*;
StructSpecifier : StructOrUnionSpecifier;
UnionSpecifier : StructOrUnionSpecifier;

// (6.7.2.1) struct-or-union:
// struct
// union

// (6.7.2.1) struct-declaration-list:
// struct-declaration
// struct-declaration-list struct-declaration

// (6.7.2.1) struct-declaration:
// specifier-qualifier-list struct-declarator-listopt ;
// TODO: static_assert-declaration
StructDeclaration ::= TypeSpecifier* TypeQualifier* StructDeclarator*;

// (6.7.2.1) specifier-qualifier-list:
// type-specifier specifier-qualifier-listopt
// type-qualifier specifier-qualifier-listopt

// (6.7.2.1) struct-declarator-list:
// struct-declarator
// struct-declarator-list , struct-declarator

// (6.7.2.1) struct-declarator:
// declarator
// declarator opt : constant-expression
StructDeclarator ::= [Declarator] [Expression];

// (6.7.2.2) enum-specifier:
// enum identifier opt { enumerator-list }
// enum identifier opt { enumerator-list , }
// enum identifier
EnumSpecifier : TypeSpecifier ::= [Identifier] Enumerator*;

// (6.7.2.2) enumerator-list:
// enumerator
// enumerator-list , enumerator

// (6.7.2.2) enumerator:
// enumeration-constant
// enumeration-constant = constant-expression
Enumerator ::= EnumerationConstant [Expression];

EnumerationConstant ::= <ID>;

// (6.7.2.4) atomic-type-specifier:
// _Atomic ( type-name )
AtomicTypeSpecifier : TypeSpecifier ::= TypeName;

// (6.7.3) type-qualifier:
// const
// restrict
// volatile
// _Atomic
Const : TypeQualifier;
Restrict : TypeQualifier;
Volatile : TypeQualifier;
Atomic : TypeQualifier;

// (6.7.4) function-specifier:
// inline
// _Noreturn
Inline : FunctionSpecifier;
Noreturn : FunctionSpecifier;

// (6.7.5) alignment-specifier:
// _Alignas ( type-name )
// _Alignas ( constant-expression )
AlignAsType : AlignmentSpecifier ::= TypeName;
AlignAsExpr : AlignmentSpecifier ::= Expression;

// (6.7.6) declarator:
// pointer opt direct-declarator
abstract Declarator ::= [Pointer];
// (6.7.6) direct-declarator:
// identifier
// ( declarator )
IdentifierDeclarator : Declarator ::= Identifier;
ParenDeclarator : Declarator ::= Declarator;

// direct-declarator [ type-qualifier-list opt assignment-expressionopt ]
// direct-declarator [ static type-qualifier-listopt assignment-expression ]
// direct-declarator [ type-qualifier-list static assignment-expression ]
// direct-declarator [ type-qualifier-list opt * ]
ArrayDeclarator : Declarator ::= Declarator TypeQualifier* [Expression] [Static];

ArrayDeclaratorVLA : Declarator ::= Declarator TypeQualifier*;
// direct-declarator ( parameter-type-list )
// direct-declarator ( identifier-listopt ) TODO
FunctionDeclarator : Declarator ::= Declarator ParameterType*;

// (6.7.6) pointer:
// * type-qualifier-listopt
// * type-qualifier-list opt pointer
Pointer ::= TypeQualifier* [Pointer];

// (6.7.6) type-qualifier-list:
// type-qualifier
// type-qualifier-list type-qualifier

// (6.7.6) parameter-type-list:
// parameter-list
// parameter-list , ...
abstract ParameterType;
ParameterVarArgType : ParameterType;

// (6.7.6) parameter-list:
// parameter-declaration
// parameter-list , parameter-declaration
ParameterDeclaration : ParameterType ::= DeclarationSpecifier* Declarator;
AbstractParameterDeclaration : ParameterType ::= DeclarationSpecifier* [AbstractDeclarator];

// (6.7.6) parameter-declaration:
// declaration-specifiers declarator
// declaration-specifiers abstract-declaratoropt

// (6.7.6) identifier-list: TODO
// identifier
// identifier-list , identifier

// (6.7.7) type-name:
// specifier-qualifier-list abstract-declarator opt
TypeName ::= TypeSpecifier* TypeQualifier* [AbstractDeclarator];

// (6.7.7) abstract-declarator:
// pointer
// pointer opt direct-abstract-declarator
AbstractDeclarator ::= [Pointer];

// (6.7.7) direct-abstract-declarator:
// ( abstract-declarator )
// direct-abstract-declarator opt [ type-qualifier-list opt  assignment-expressionopt ]
// direct-abstract-declaratoropt [ static type-qualifier-listopt  assignment-expression ]
// direct-abstract-declaratoropt [ type-qualifier-list static assignment-expression ]
// direct-abstract-declaratoropt [ * ]
ParenAbstractDeclarator : AbstractDeclarator ::= AbstractDeclarator;
AbstractArrayDeclarator : AbstractDeclarator ::= AbstractDeclarator TypeQualifier* [Expression] [Static];
AbstractArrayDeclaratorVLA : AbstractDeclarator ::= AbstractDeclarator TypeQualifier*;
// direct-abstract-declaratoropt ( parameter-type-list opt )
AbstractFunctionDeclarator : AbstractDeclarator ::= ParameterType*;

// (6.7.8) typedef-name:
// identifier
TypedefName : TypeSpecifier ::= Identifier;

// (6.7.9) initializer:
// assignment-expression
// { initializer-list }
// { initializer-list , }
abstract Initializer;
InitializerExpression : Initializer ::= Expression;
InitializerList : Initializer ::= InitializerListElem*;

// (6.7.9) initializer-list:
// designationopt initializer
// initializer-list , designation opt initializer
InitializerListElem ::= Designator* Initializer;

// (6.7.9) designation:
// designator-list =

// (6.7.9) designator-list:
// designator
// designator-list designator

// (6.7.9) designator:
// [ constant-expression ]
// . identifier
abstract Designator;
ConstantExpressionDesignator : Designator ::= Expression;
IdentifierDesignator : Designator ::= Identifier;

// A.2.3 Statements
// (6.8) statement:
// labeled-statement
// compound-statement
// expression-statement
// selection-statement
// iteration-statement
// jump-statement
abstract Statement;

// (6.8.1) labeled-statement:
// identifier : statement
// case constant-expression : statement
// default : statement
LabelStatement : Statement ::= Identifier Statement;
CaseStatement : Statement ::= Expression Statement;
DefaultStatement : Statement ::= Statement;

// (6.8.2) compound-statement:
// { block-item-list opt }
CompoundStatement : Statement ::= Statement*;

// (6.8.2) block-item-list:
// block-item
// block-item-list block-item

// (6.8.2) block-item:
// declaration
// statement
DeclarationStatement : Statement ::= DeclarationOrDefinition;

// (6.8.3) expression-statement:
// expressionopt ;
EmptyStatement : Statement;

// (6.8.4) selection-statement:
// if ( expression ) statement
// if ( expression ) statement else statement
// switch ( expression ) statement
IfStatement : Statement ::= Cond:Expression TrueBranch:Statement;
IfElseStatement : Statement ::= Cond:Expression TrueBranch:Statement FalseBranch:Statement;
SwitchStatement : Statement ::= Expression Statement;

// (6.8.5) iteration-statement:
// while ( expression ) statement
WhileStatement : Statement ::= Expression Statement;

// do statement while ( expression ) ;
DoWhileStatement : Statement ::= Expression Statement;

// for ( expression opt ; expression opt ; expression opt ) statement
ForStatement : Statement ::= [Init:Statement] [Cond:Expression] [Update:Expression] Statement;

// for ( declaration expression opt ; expression opt ) statement
// (6.8.6) jump-statement:
// goto identifier ;
// continue ;
// break ;
// return expression opt ;
GotoStatement : Statement ::= Identifier;
ContinueStatement : Statement;
BreakStatement : Statement;
ReturnStatement : Statement ::= [Expression];


UnknownDeclaration : Declaration ::= ASTNode*;
UnknownStatement : Statement ::= ASTNode*;
UnknownExpression : Expression ::= ASTNode*;
UnknownTypeSpecifier : TypeSpecifier ::= <TYPE>;
Comment : Declaration ::= <COMMENT> Comment*;