aspect CExpr {
  syn AST.Expr Expression.asClangExpr() {
    throw new RuntimeException(this.getClass() + " " + Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }

  eq IdentifierExpression.asClangExpr() {
    return AST.DeclRefExpr.build().setName(getIdentifier().getID());
  }

  eq MetaVarExpression.asClangExpr() {
    return AST.Expr.build().trySetBinding(this);
  }

  eq GapExpression.asClangExpr() {
    return AST.Expr.build().gap();
  }

  eq CallExpression.asClangExpr() {
    ArrayList<AST.Expr> args = new ArrayList<>();
    for (Expression e : getArgs()) {
      args.add(e.asClangExpr());
    }
    return AST.CallExpr.build(getCallee().asClangExpr(), args);
  }

  syn AST.Expr Constant.asClangExpr() {
    throw new RuntimeException(Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }
  eq IntegerConstant.asClangExpr() = AST.IntegerLiteral.build(getCONSTANT());
  eq FloatingConstant.asClangExpr() = AST.FloatingLiteral.build(getCONSTANT());

  eq ConstantExpression.asClangExpr() {
    // TODO: proper matching for constants
    return getConstant().asClangExpr();
  }

  syn String BinaryExpression.clangOperator() {
    // TODO: add more operators
    throw new RuntimeException(Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }
  eq AddExpression.clangOperator() = "+";
  eq MulExpression.clangOperator() = "*";
  eq DivExpression.clangOperator() = "/";
  eq ModExpression.clangOperator() = "%";
  eq SubExpression.clangOperator() = "-";
  eq EQExpression.clangOperator() = "==";
  eq NEQExpression.clangOperator() = "!=";
  eq AssignmentExpression.clangOperator() = "=";
  eq AndExpression.clangOperator() = "&&";
  eq BitwiseAndExpression.clangOperator() = "&";
  eq OrExpression.clangOperator() = "||";
  eq BitwiseOrExpression.clangOperator() = "|";

  eq BinaryExpression.asClangExpr() {
    return AST.BinaryOperator.build(clangOperator(), getLeft().asClangExpr(), getRight().asClangExpr());
  }

  eq MemberExpression.asClangExpr() {
    return AST.MemberExpr.build(getExpression().asClangExpr(), getFieldName().asClangDecl(), false);
  }

  eq PointerMemberExpression.asClangExpr() {
    return AST.MemberExpr.build(getExpression().asClangExpr(), getFieldName().asClangDecl(), true);
  }

  syn AST.Expr Initializer.asClangExpr() {
    throw new RuntimeException(Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }

  eq InitializerExpression.asClangExpr() = getExpression().asClangExpr();

  eq PointerDereferenceExpression.asClangExpr() = AST.UnaryOperator.build("*", false, getExpression().asClangExpr());

  eq NotExpression.asClangExpr() = AST.UnaryOperator.build("!", false, getExpression().asClangExpr());

  eq ArrayIndexExpression.asClangExpr() = AST.ArraySubscriptExpr.build(getBase().asClangExpr(), getIndex().asClangExpr());

  eq CastExpression.asClangExpr() = AST.CStyleCastExpr.build(getExpression().asClangExpr(), getTypeName().asType());
}
