aspect CExpr {
  syn AST.Expr Expression.asClangExpr() {
    throw new RuntimeException(Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }

  eq IdentifierExpression.asClangExpr() {
    return AST.DeclRefExpr.build().setName(getIdentifier().getID());
  }

  eq MetaVarExpression.asClangExpr() {
    return AST.Expr.build().trySetBinding(this);
  }

  eq GapExpression.asClangExpr() {
    return AST.Expr.build().gap();
  }

  eq CallExpression.asClangExpr() {
    ArrayList<AST.Expr> args = new ArrayList<>();
    for (Expression e : getArgs()) {
      args.add(e.asClangExpr());
    }
    return AST.CallExpr.build(getCallee().asClangExpr(), args);
  }


  syn String BinaryExpression.clangOperator() {
    // TODO: add more operators
    throw new RuntimeException(Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }
  eq AddExpression.clangOperator() = "+";
  eq MulExpression.clangOperator() = "*";
  eq DivExpression.clangOperator() = "/";
  eq ModExpression.clangOperator() = "%";
  eq SubExpression.clangOperator() = "-";


  eq BinaryExpression.asClangExpr() {
    return AST.BinaryOperator.build(clangOperator(), getLeft().asClangExpr(), getRight().asClangExpr());
  }
}
