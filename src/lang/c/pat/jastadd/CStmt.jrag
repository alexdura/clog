import java.util.ArrayList;
import clang.AST;


aspect CStmt {
  syn AST.Stmt Statement.asClangStmt()  {
    throw new RuntimeException(Thread.currentThread().getStackTrace()[1] + " not implemented.");
  }

  eq MetaVarStatement.asClangStmt() {
    return AST.Stmt.build().trySetBinding(this);
  }

  eq GapStatement.asClangStmt() {
    return AST.Stmt.build().gap();
  }

  eq MetaVarDeclarationStatement.asClangStmt() {
    return AST.Stmt.build().trySetBinding(this);
  }


  eq CompoundStatement.asClangStmt() {
    ArrayList<AST.Stmt> stmts = new ArrayList<>();
    for (Statement s : getStatements()) {
      stmts.add(s.asClangStmt());
    }
    return AST.CompoundStmt.build(stmts.toArray(new AST.Stmt[0]));
  }

  eq WhileStatement.asClangStmt() {
    return AST.WhileStmt.build(getExpression().asClangExpr(), getStatement().asClangStmt());
  }

  eq DoWhileStatement.asClangStmt() {
    return AST.DoStmt.build(getExpression().asClangExpr(), getStatement().asClangStmt());

  }

  eq ForStatement.asClangStmt() {
    return AST.ForStmt.build(hasInit() ? getInit().asClangStmt() : null,
                             hasCond() ? getCond().asClangExpr() : null,
                             hasUpdate() ? getUpdate().asClangExpr() : null,
                             getStatement().asClangStmt());
  }

  eq IfStatement.asClangStmt() {
    return AST.IfStmt.build(getCond().asClangExpr(),
                            getTrueBranch().asClangStmt());
  }

  eq IfElseStatement.asClangStmt() {
    return AST.IfStmt.build(getCond().asClangExpr(),
                            getTrueBranch().asClangStmt(),
                            getFalseBranch().asClangStmt());
  }

  eq SwitchStatement.asClangStmt() {
    return AST.SwitchStmt.build(getExpression().asClangExpr(),
                                getStatement().asClangStmt());
  }

  eq CaseStatement.asClangStmt() {
    return AST.CaseStmt.build(getExpression().asClangExpr(),
                              getStatement().asClangStmt());
  }

  eq DefaultStatement.asClangStmt() {
    return AST.DefaultStmt.build(getStatement().asClangStmt());
  }

  eq BreakStatement.asClangStmt() {
    return AST.BreakStmt.build();
  }

  eq ReturnStatement.asClangStmt() {
    if (hasExpression()) {
      return AST.ReturnStmt.build(getExpression().asClangExpr());
    } else {
      return AST.ReturnStmt.build();
    }
  }

  eq Expression.asClangStmt() = asClangExpr();

  eq DeclarationStatement.asClangStmt() {
    Declaration d = (Declaration) getDeclarationOrDefinition();
    return AST.DeclStmt.build(d.clangDecls().toArray(new AST.Decl[0]));
  }
}
