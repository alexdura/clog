// A.2.2 Declarations
// (6.7) declaration:
// declaration-specifiers init-declarator-list opt ;
// static_assert-declaration : TODO
Declaration declaration = declaration_specifiers init_declarator_list_opt {: return new Declaration(declaration_specifiers, init_declarator_list_opt); :}
                        ;

// (6.7) declaration-specifiers:
// storage-class-specifier declaration-specifiersopt
// type-specifier declaration-specifiersopt
// type-qualifier declaration-specifiersopt
// function-specifier declaration-specifiersopt
// alignment-specifier declaration-specifiersopt
DeclarationSpecifier declaration_specifier = storage_class_specifier
                                           | type_specifier
                                           | type_qualifier
                                           | function_specifier
                                           | alignment_specifier
                                           ;

List declaration_specifiers = declaration_specifier {: return new List().add(declaration_specifier); :}
     			    | declaration_specifiers declaration_specifier {: return declaration_specifiers.add(declaration_specifier); :}
			    ;

// (6.7) init-declarator-list:
// init-declarator
// init-declarator-list , init-declarator
List init_declarator_list_opt = init_declarator_list
     			      | /* empty */  {: return new List(); :}
			      ;

List init_declarator_list = init_declarator {: return new List().add(init_declarator); :}
     			  | init_declarator_list init_declarator {: return init_declarator_list.add(init_declarator); :}
			  ;

// (6.7) init-declarator:
// declarator
// declarator = initializer
InitDeclarator init_declarator = declarator initializer? {: return new InitDeclarator(declarator, initializer); :}
	       	       ;

// (6.7.1) storage-class-specifier:
// typedef
// extern
// static
// _Thread_local
// auto
// register
StorageClassSpecifier storage_class_specifier = TYPEDEF {: return new Typedef(); :}
                                              | EXTERN {: return new Extern(); :}
                                              | STATIC {: return new Static(); :}
                                              | THREAD_LOCAL {: return new ThreadLocal(); :}
                                              | AUTO {: return new Auto(); :}
                                              | REGISTER {: return new Register(); :}
                                              ;

// (6.7.2) type-specifier:
// void
// char
// short
// int
// long
// float
// double
// signed
// unsigned
// _Bool
// _Complex
// atomic-type-specifier
// struct-or-union-specifier
// enum-specifier
// typedef-name
TypeSpecifier type_specifier = VOID {: return new Void(); :}
                             | CHAR {: return new Char(); :}
                             | SHORT {: return new Short(); :}
                             | INT {: return new Int(); :}
                             | LONG {: return new Long(); :}
                             | FLOAT {: return new Float(); :}
                             | DOUBLE {: return new Double(); :}
                             | SIGNED {: return new Signed(); :}
                             | UNSIGNED {: return new Unsigned(); :}
                             | U_BOOL {: return new Bool(); :}
                             | U_COMPLEX {: return new Complex(); :}
                             | atomic_type_specifier
                             | struct_specifier
                             | union_specifier
                             | enum_specifier
                             | typedef_name
                             ;

// (6.7.2.1) struct-or-union-specifier:
// struct-or-union identifieropt { struct-declaration-list }
// struct-or-union identifier
// (6.7.2.1) struct-or-union:
// struct
// union
StructSpecifier struct_specifier = STRUCT identifier? LBRACE struct_declaration_list RBRACE {: return new StructSpecifier(identifier, struct_declaration_list); :}
                                 | STRUCT identifier {: return new StructSpecifier(new Opt(identifier), new List()); :}
                                 ;

UnionSpecifier union_specifier = UNION identifier? LBRACE struct_declaration_list RBRACE {: return new UnionSpecifier(identifier, struct_declaration_list); :}
                               | UNION identifier {: return new UnionSpecifier(new Opt(identifier), new List()); :}
                               ;

List struct_declaration_list = struct_declaration {: return new List().add(struct_declaration); :}
			     | struct_declaration_list struct_declaration {: return struct_declaration_list.add(struct_declaration); :}
			     ;

// (6.7.2.1) struct-declaration-list:
// struct-declaration
// struct-declaration-list struct-declaration
// (6.7.2.1) struct-declaration:
// specifier-qualifier-list struct-declarator-listopt ;
// static_assert-declaration : TODO
StructDeclaration struct_declaration = specifier_qualifier_list struct_declarator_list SEMICOLON {:
                                         return new StructDeclaration(List.filter(specifier_qualifier_list, TypeSpecifier.class),
                                                                      List.filter(specifier_qualifier_list, TypeQualifier.class),
                                                struct_declarator_list); :}
                                     ;

// (6.7.2.1) specifier-qualifier-list:
// type-specifier specifier-qualifier-listopt
// type-qualifier specifier-qualifier-listopt
List specifier_qualifier_list = specifier_qualifier_list type_specifier {: return specifier_qualifier_list.add(type_specifier); :}
			      | specifier_qualifier_list type_qualifier {: return specifier_qualifier_list.add(type_qualifier); :}
			      | type_specifier {: return new List().add(type_specifier); :}
			      | type_qualifier {: return new List().add(type_qualifier); :}
			      ;

// (6.7.2.1) struct-declarator-list:
// struct-declarator
// struct-declarator-list , struct-declarator
List struct_declarator_list = struct_declarator {: return new List().add(struct_declarator); :}
     		      	    | struct_declarator_list struct_declarator {: return  struct_declarator_list.add(struct_declarator); :}
			    ;

// (6.7.2.1) struct-declarator:
// declarator
// declarator opt : constant-expression
StructDeclarator struct_declarator = declarator? COLON constant_expression {: return new StructDeclarator(declarator, new Opt(constant_expression)); :}
		 		   | declarator {: return new StructDeclarator(new Opt(declarator), new Opt()); :}
				   ;

// (6.7.2.2) enum-specifier:
// enum identifier opt { enumerator-list }
// enum identifier opt { enumerator-list , }
// enum identifier
EnumSpecifier enum_specifier = ENUM identifier? LBRACE enumerator_list RBRACE {: return new EnumSpecifier(identifier, enumerator_list); :}
	      		     | ENUM identifier? LBRACE enumerator_list COMMA RBRACE {: return new EnumSpecifier(identifier, enumerator_list); :}
			     | ENUM identifier {: return new EnumSpecifier(new Opt(identifier), new List()); :}
			     ;

// (6.7.2.2) enumerator-list:
// enumerator
// enumerator-list , enumerator
List enumerator_list = enumerator {: return new List().add(enumerator); :}
     		     | enumerator_list COMMA enumerator {: return enumerator_list.add(enumerator); :}
		     ;

// (6.7.2.2) enumerator:
// enumeration-constant
// enumeration-constant = constant-expression
Enumerator enumerator = enumeration_constant ASSIGN constant_expression {: return new Enumerator(enumeration_constant, new Opt(constant_expression)); :}
	   	      | enumeration_constant {: return new Enumerator(enumeration_constant, new Opt()); :}
		      ;

// (6.7.2.4) atomic-type-specifier:
// _Atomic ( type-name )
AtomicTypeSpecifier atomic_type_specifier = U_ATOMIC LPAREN type_name RPAREN {: return new AtomicTypeSpecifier(type_name); :}
		    			  ;

// (6.7.3) type-qualifier:
// const
// restrict
// volatile
// _Atomic
TypeQualifier type_qualifier = CONST {: return new Const(); :}
	      		     | RESTRICT {: return new Restrict(); :}
			     | VOLATILE {: return new Volatile(); :}
			     | U_ATOMIC {: return new Atomic(); :}
			     ;

// (6.7.4) function-specifier:
// inline
// _Noreturn
FunctionSpecifier function_specifier = INLINE {: return new Inline(); :}
		  		     | NORETURN {: return new Noreturn(); :}
				     ;

// (6.7.5) alignment-specifier:
// _Alignas ( type-name )
// _Alignas ( constant-expression )
AlignmentSpecifier alignment_specifier = ALIGNAS LPAREN type_name RPAREN {: return new AlignAsType(type_name); :}
		   		       | ALIGNAS LPAREN constant_expression RPAREN {: return new AlignAsExpr(constant_expression); :}
				       ;

// (6.7.6) declarator:
// pointer opt direct-declarator
Declarator declarator = pointer? STAR direct_declarator {: return direct_declarator.setPointerOpt(pointer); :}
	   	      ;

// (6.7.6) direct-declarator:
// identifier
// ( declarator )
// direct-declarator [ type-qualifier-list opt assignment-expressionopt ]
// direct-declarator [ static type-qualifier-listopt assignment-expression ]
// direct-declarator [ type-qualifier-list static assignment-expression ]
// direct-declarator [ type-qualifier-list opt * ]
// direct-declarator ( parameter-type-list )
// direct-declarator ( identifier-listopt ) TODO
Declarator direct_declarator = identifier {: return new IdentifierDeclarator(new Opt(), identifier); :}
			     | LPAREN declarator RPAREN {: return declarator; :}
			     | direct_declarator LBRACK type_qualifier_list_opt assignment_expression? RBRACK {: return new ArrayDeclarator(new Opt(), direct_declarator, type_qualifier_list_opt, assignment_expression, new Opt()); :}
			     | direct_declarator LBRACK STATIC type_qualifier_list_opt assignment_expression? RBRACK {: return new ArrayDeclarator(new Opt(), direct_declarator, type_qualifier_list_opt, assignment_expression, new Opt(new Static())); :}
			     | direct_declarator LBRACK type_qualifier_list STATIC assignment_expression? RBRACK {: return new ArrayDeclarator(new Opt(), direct_declarator, type_qualifier_list, assignment_expression, new Opt(new Static())); :}
			     | direct_declarator LRBRACK type_qualifier_list_opt STAR RBRACK {: return new ArrayDeclaratorVLA(new Opt(), direct_declarator, type_qualifier_list_opt); :}
			     | direct_declarator LPAREN parameter_type_list RPAREN {: return new FunctionDeclarator(new Opt(), parameter_type_list); :}
			     ;


// (6.7.6) pointer:
// * type-qualifier-listopt
// * type-qualifier-list opt pointer
Pointer pointer = STAR type_qualifier_list_opt pointer? {: return new Pointer(type_qualifier_list_opt, pointer); :}
		;

// (6.7.6) type-qualifier-list:
// type-qualifier
// type-qualifier-list type-qualifier
List type_qualifier_list_opt = /* empty */ {: return new List(); :}
     			     | type_qualifier_list
			     ;

List type_qualifier_list = type_qualifier {: return new List().add(type_qualifier); :}
     			 | type_qualifier_list type_qualifier {: return type_qualifier_list.add(type_qualifier); :}
			 ;

// (6.7.6) parameter-type-list:
// parameter-list
// parameter-list , ...
List parameter_type_list = parameter_list COMMA ELLIPSIS {: return parameter_list.add(new ParameterVarArgType()); :}
     			 | parameter_list {: return parameter_list; :}
			 ;

// (6.7.6) parameter-list:
// parameter-declaration
// parameter-list , parameter-declaration
List parameter_list = parameter_type {: return new List().add(parameter_type); :}
     		    | parameter_list COMMA parameter_type {: return parameter_list.add(parameter_type); :}
		    ;

// (6.7.6) parameter-declaration:
// declaration-specifiers declarator
// declaration-specifiers abstract-declaratoropt
ParameterType parameter_type = declaration_specifiers declarator {: return new ParameterDeclaration(declaration_specifiers, declarator); :}
	      		     | declaration_specifiers abstract_declarator? {: return new AbstractParameterDeclaration(declaration_specifiers, abstract_declarator); :}
			     ;

// (6.7.6) identifier-list: TODO
// identifier
// identifier-list , identifier

// (6.7.7) type-name:
// specifier-qualifier-list abstract-declarator opt
TypeName type_name = specifier_qualifier_list abstract_declarator? {: return new TypeName(List.filter(specifier_qualifier_list, TypeSpecifier.class), List.filter(specifier_qualifier_list, TypeQualifier.class), abstract_declarator); :}
	 	   ;

// (6.7.7) abstract-declarator:
// pointer
// pointer opt direct-abstract-declarator
AbstractDeclarator abstract_declarator = pointer {: return new AbstractDeclarator().setPointer(pointer); :}
		   		       | pointer? direct_abstract_declarator {: return direct_abstract_declarator.setPointerOpt(pointer); :}
				       ;

// (6.7.7) direct-abstract-declarator:
// ( abstract-declarator )
// direct-abstract-declarator opt [ type-qualifier-list opt
// assignment-expressionopt ]
// direct-abstract-declaratoropt [ static type-qualifier-listopt
// assignment-expression ]
// direct-abstract-declaratoropt [ type-qualifier-list static
// assignment-expression ]
// direct-abstract-declaratoropt [ * ]
// direct-abstract-declaratoropt ( parameter-type-list opt )

AbstractDeclarator direct_abstract_declarator = LPAREN abstract_declarator RPAREN {: return abstract_declarator; :}
		   			      | direct_abstract_declarator LBRACK type_qualifier_list_opt assignment_expression? RBRACK {: return new AbstractArrayDeclarator(new Opt(), direct_abstract_declarator, type_qualifier_list_opt, assignment_expression, new Opt()); :}
			     		      | direct_abstract_declarator LBRACK STATIC type_qualifier_list_opt assignment_expression? RBRACK {: return new AbstractArrayDeclarator(new Opt(), direct_abstract_declarator, type_qualifier_list_opt, assignment_expression, new Opt(new Static())); :}
					      | direct_abstract_declarator LBRACK type_qualifier_list STATIC assignment_expression? RBRACK {: return new AbstractArrayDeclarator(new Opt(), direct_abstract_declarator, type_qualifier_list, assignment_expression, new Opt(new Static())); :}
			     		      | direct_abstract_declarator LRBRACK type_qualifier_list_opt STAR RBRACK {: return new AbstractArrayDeclaratorVLA(new Opt(), direct_abstract_declarator, type_qualifier_list_opt); :}
					      | direct_abstract_declarator LPAREN parameter_type_list RPAREN {: return new AbstractFunctionDeclarator(new Opt(), parameter_type_list); :}
			     		      ;


// (6.7.8) typedef-name:
// identifier
TypedefName typedef_name = identifier {: return new TypedefName(identifier); :}
	    		 ;

// (6.7.9) initializer:
// assignment-expression
// { initializer-list }
// { initializer-list , }
Initializer initializer = assignment_expression {: return new InitializerExpression(assignment_expression); :}
	    		| initializer_list {: return new InitializerList(initializer_list); :}
			;

// (6.7.9) initializer-list:
// designationopt initializer
// initializer-list , designation opt initializer
List initializer_list = designator_list_opt initializer {: return new List().add(new InitializerListElem(designator_list_opt, initializer)); :}
		      | initializer_list designator_list_opt initializer {: return initializer_list.add(new InitializerListElem(designator_list_opt, initializer)); :}
				 ;


// (6.7.9) designation:
// designator-list =
// (6.7.9) designator-list:
// designator
// designator-list designator
List designator_list_opt = designator_list
     			 | /* empty */ {: return new List(); :}
			 ;

List designator_list = designator {: return new List().add(designator); :}
     		     | designator_list designator {: return designator_list.add(designator); :}
		     ;

// (6.7.9) designator:
// [ constant-expression ]
// . identifier
Designator designator = LBRACK constant_expression RBRACK {: return new ConstantExpressionDesignator(constant_expression); :}
	    	      | DOT identifier {: return new IdentifierDesignator(identifier); :}
		      ;
// (6.7.10) static_assert-declaration: TODO
// _Static_assert ( constant-expression , string-literal ) ;
