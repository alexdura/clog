// A.2.1 Expressions
// (6.5.1) primary-expression:
// identifier
// constant
// string-literal
// ( expression )
// generic-selection // TODO
Expression primary_expression = identifier {: return new IdentifierExpression(identifier); :}
	   		      | constant {: return new ConstantExpression(constant); :}
			      | string_literal {: return new StringLiteralExpression(string_literal); :}
			      | LPAREN expression RPAREN {: return expression; :}
	   		      ;

// (6.5.1.1) generic-selection: TODO
// _Generic ( assignment-expression , generic-assoc-list )
// (6.5.1.1) generic-assoc-list:
// generic-association
// generic-assoc-list , generic-association
// (6.5.1.1) generic-association:
// type-name : assignment-expression
// default : assignment-expression

// (6.5.2) postfix-expression:
// primary-expression
// postfix-expression [ expression ]
// postfix-expression ( argument-expression-list opt )
// postfix-expression . identifier
// postfix-expression -> identifier
// postfix-expression ++
// postfix-expression --
// ( type-name ) { initializer-list }
// ( type-name ) { initializer-list , }
Expression postfix_expression = primary_expression
	   		      | postfix_expression LBRACK expression RBRACK {: return new ArrayIndexExpression(postfix_expression, expression); :}
			      | postfix_expression LPAREN argument_expression_list_opt RPAREN {: return new CallExpression(postfix_expression, argument_expression_list_opt); :}
			      | postfix_expression DOT field_name {: return new MemberExpression(postfix_expression, field_name); :}
			      | postfix_expression ARROW field_name {: return new PointerMemberExpression(postfix_expression, field_name); :}
			      | postfix_expression ICR {: return new PostIncrementExpression(postfix_expression); :}
			      | postfix_expression DECR {: return new PostDecrementExpression(postfix_expression); :}
			      | LPAREN type_name RPAREN LBRACE initializer_list RBRACE {: return new InitializerListExpression(type_name, initializer_list); :}
			      | LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE {: return new InitializerListExpression(type_name, initializer_list); :}
			      ;

FieldName field_name = identifier {: return new FieldName(identifier); :}
                     ;

// (6.5.2) argument-expression-list:
// assignment-expression
// argument-expression-list , assignment-expression
List argument_expression_list_opt = /* empty */ {: return new List(); :}
     				  | argument_expression_list
				  ;

List argument_expression_list = argument_expression {: return new List().add(argument_expression); :}
     			      | argument_expression_list COMMA argument_expression {: return argument_expression_list.add(argument_expression); :}
			      ;

Expression argument_expression = assignment_expression
                               ;

// (6.5.3) unary-expression:
// postfix-expression
// ++ unary-expression
// -- unary-expression
// unary-operator cast-expression
// sizeof unary-expression
// sizeof ( type-name )
// alignof ( type-name )
// (6.5.3) unary-operator: one of
// & * + - ~ !
Expression unary_expression = postfix_expression
	   		    | ICR unary_expression {: return new PreIncrementExpression(unary_expression); :}
			    | DECR unary_expression {: return new PreDecrementExpression(unary_expression); :}
			    | AND cast_expression {: return new AddressOfExpression(cast_expression); :}
			    | STAR cast_expression {: return new PointerDereferenceExpression(cast_expression); :}
			    | PLUS cast_expression {: return new UnaryPlusExpression(cast_expression); :}
			    | MINUS cast_expression {: return new UnaryMinusExpression(cast_expression); :}
			    | NEGATE cast_expression {: return new BitwiseNotExpression(cast_expression); :}
			    | NOT cast_expression {: return new NotExpression(cast_expression); :}
			    | SIZEOF unary_expression {: return new SizeofExpressionExpression(unary_expression); :}
			    | SIZEOF LPAREN type_name RPAREN {: return new SizeofTypeExpression(type_name); :}
			    | ALIGNOF LPAREN type_name RPAREN {: return new AlignofExpression(type_name); :}
			    ;

// (6.5.4) cast-expression:
// unary-expression
// ( type-name ) cast-expression
Expression cast_expression = unary_expression
	   		   | LPAREN type_name RPAREN cast_expression {: return new CastExpression(type_name, cast_expression); :}
			   ;

// (6.5.5) multiplicative-expression:
// cast-expression
// multiplicative-expression * cast-expression
// multiplicative-expression / cast-expression
// multiplicative-expression % cast-expression
Expression multiplicative_expression = cast_expression
	   			     | multiplicative_expression STAR cast_expression {: return new MulExpression(multiplicative_expression, cast_expression); :}
				     | multiplicative_expression DIV cast_expression {: return new DivExpression(multiplicative_expression, cast_expression); :}
				     | multiplicative_expression MOD cast_expression {: return new ModExpression(multiplicative_expression, cast_expression); :}
				     ;

// (6.5.6) additive-expression:
// multiplicative-expression
// additive-expression + multiplicative-expression
// additive-expression - multiplicative-expression
Expression additive_expression = multiplicative_expression
	   		       | additive_expression PLUS multiplicative_expression {: return new AddExpression(additive_expression, multiplicative_expression); :}
			       | additive_expression MINUS multiplicative_expression {: return new SubExpression(additive_expression, multiplicative_expression); :}
			       ;

// (6.5.7) shift-expression:
// additive-expression
// shift-expression << additive-expression
// shift-expression >> additive-expression
Expression shift_expression = additive_expression
			    | shift_expression LS additive_expression {: return new LShiftExpression(shift_expression, additive_expression); :}
			    | shift_expression RS additive_expression {: return new RShiftExpression(shift_expression, additive_expression); :}
			    ;

// (6.5.8) relational-expression:
// shift-expression
// relational-expression < shift-expression
// relational-expression > shift-expression
// relational-expression <= shift-expression
// relational-expression >= shift-expression
Expression relational_expression = shift_expression
				 | relational_expression LT shift_expression {: return new LTExpression(relational_expression, shift_expression); :}
				 | relational_expression GT shift_expression {: return new GTExpression(relational_expression, shift_expression); :}
				 | relational_expression LE shift_expression {: return new LEQExpression(relational_expression, shift_expression); :}
				 | relational_expression GE shift_expression {: return new GEQExpression(relational_expression, shift_expression); :}
				 ;

// (6.5.9) equality-expression:
// relational-expression
// equality-expression == relational-expression
// equality-expression != relational-expression
Expression equality_expression = relational_expression
	   		       | equality_expression EQ relational_expression {: return new EQExpression(equality_expression, relational_expression); :}
			       | equality_expression NE relational_expression {: return new NEQExpression(equality_expression, relational_expression); :}
			       ;

// (6.5.10) AND-expression:
// equality-expression
// AND-expression & equality-expression
Expression and_expression = equality_expression
	   		  | and_expression AND equality_expression {: return new BitwiseAndExpression(and_expression, equality_expression); :}
			  ;

// (6.5.11) exclusive-OR-expression:
// AND-expression
// exclusive-OR-expression ^ AND-expression
Expression exclusive_or_expression = and_expression
	   			   | exclusive_or_expression XOR and_expression {: return new BitwiseXorExpression(exclusive_or_expression, and_expression); :}
				   ;

// (6.5.12) inclusive-OR-expression:
// exclusive-OR-expression
// inclusive-OR-expression | exclusive-OR-expression
Expression inclusive_or_expression = exclusive_or_expression
	   			   | inclusive_or_expression PIPE exclusive_or_expression {: return new BitwiseOrExpression(inclusive_or_expression, exclusive_or_expression); :}
				   ;

// (6.5.13) logical-AND-expression:
// inclusive-OR-expression
// logical-AND-expression && inclusive-OR-expression
Expression logical_and_expression = inclusive_or_expression
	   			  | logical_and_expression ANDAND inclusive_or_expression {: return new AndExpression(logical_and_expression, inclusive_or_expression); :}
				  ;

// (6.5.14) logical-OR-expression:
// logical-AND-expression
// logical-OR-expression || logical-AND-expression
Expression logical_or_expression = logical_and_expression
	   			 | logical_or_expression OROR logical_and_expression {: return new OrExpression(logical_or_expression, logical_and_expression); :}
				 ;

// (6.5.15) conditional-expression:
// logical-OR-expression
// logical-OR-expression ? expression : conditional-expression
Expression conditional_expression = logical_or_expression
	   			  | logical_or_expression QUESTION expression COLON conditional_expression {: return new ConditionalExpression(logical_or_expression, expression, conditional_expression); :}
				  ;

// (6.5.16) assignment-expression:
// conditional-expression
// unary-expression assignment-operator assignment-expression
// (6.5.16) assignment-operator: one of
// = *= /= %= += -= <<= >>= &= ^= |=
Expression assignment_expression = conditional_expression
	   			 | unary_expression ASSIGN assignment_expression {: return new AssignmentExpression(unary_expression, assignment_expression); :}
				 | unary_expression MULTassign assignment_expression {: return new AssignmentMulExpression(unary_expression, assignment_expression); :}
				 | unary_expression DIVassign assignment_expression {: return new AssignmentDivExpression(unary_expression, assignment_expression); :}
				 | unary_expression MODassign assignment_expression {: return new AssignmentModExpression(unary_expression, assignment_expression); :}
				 | unary_expression PLUSassign assignment_expression {: return new AssignmentAddExpression(unary_expression, assignment_expression); :}
				 | unary_expression MINUSassign assignment_expression {: return new AssignmentSubExpression(unary_expression, assignment_expression); :}
				 | unary_expression LSassign assignment_expression {: return new AssignmentLShiftExpression(unary_expression, assignment_expression); :}
				 | unary_expression RSassign assignment_expression {: return new AssignmentRShiftExpression(unary_expression, assignment_expression); :}
				 | unary_expression ANDassign assignment_expression {: return new AssignmentAndExpression(unary_expression, assignment_expression); :}
				 | unary_expression ERassign assignment_expression {: return new AssignmentXorExpression(unary_expression, assignment_expression); :}
				 | unary_expression ORassign assignment_expression {: return new AssignmentOrExpression(unary_expression, assignment_expression); :}
				 ;

// (6.5.17) expression:
// assignment-expression
// expression , assignment-expression
Expression expression = assignment_expression
		      | expression COMMA assignment_expression {: return new CommaExpression(expression, assignment_expression); :}
		      ;
