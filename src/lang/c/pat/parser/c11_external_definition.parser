// A.2.4 External definitions
// (6.9) translation-unit:
TranslationUnit translation_unit = external_declaration_list {: return new TranslationUnit(external_declaration_list); :}
				 ;

// external-declaration
// translation-unit external-declaration
List external_declaration_list = external_declaration {: return new List().add(external_declaration); :}
     			       | external_declaration_list external_declaration {: return external_declaration_list.add(external_declaration); :}
			       ;

// (6.9) external-declaration:
// function-definition
// declaration
DeclarationOrDefinition external_declaration = function_definition
					     | declaration
					     ;

// (6.9.1) function-definition:
// declaration-specifiers declarator declaration-listopt compound-statement
// NOTE: this is NOT according to the C11 spec, which allows K&R style parameter definitions.
// We dissallow K&R style parameter definitions.
FunctionDefinition function_definition = declaration_specifiers function_declarator compound_statement {: return new FunctionDefinition(declaration_specifiers, function_declarator, compound_statement); :}
		   		       ;

// (6.9.1) declaration-list:
// declaration
// declaration-list declaration
// List declaration_list_opt = /* empty */ {: return new List(); :}
//      			  | declaration_list
// 			  ;

// List declaration_list = declaration {: return new List().add(declaration); :}
//      		      | declaration_list declaration {: return declaration_list.add(declaration); :}
// 		      ;


EnumerationConstant enumeration_constant = IDENTIFIER {: return new EnumerationConstant(IDENTIFIER); :}
		    			 ;

Identifier identifier = IDENTIFIER {: return new Identifier(IDENTIFIER); :}
	   	      ;

Constant constant = INTEGERConstant {: return new Constant(); :}
	 	  | OCTALConstant {: return new Constant(); :}
	 	  ;

StringLiteral string_literal = STRINGLiteral {: return new StringLiteral(); :}
	      		     ;