Call($caller, call_expr, caller_name, callee_name) :-
	     FunDef(caller_name, $caller),
	     CallHelper(call_expr, callee_name, $caller).

CallHelper(call_expr, callee_name, a) :- call_expr <: $fun2( .. ) :>, a = c_parent(call_expr), node_to_id(a) != 0, callee_name = c_name($fun2).
CallHelper(call_expr, callee_name, b) :- CallHelper(call_expr, callee_name, a), b = c_parent(a), node_to_id(b) != 0.


# Call(caller, call_expr, caller_name, callee_name)
# when
# caller matches <: .. $fun1( .. ) { .. }:>
# and
# caller_name is ID of $fun1
# and
# call_expr matches <: $fun2( .. ) :>
# and
# caller is ANCESTOR of call_expr
# and
# callee_name is ID of $fun2


FunCall(fun2, c) :- c <: $fun2( .. ) :>, fun2 = c_name($fun2).

# FunCall(fun2, c)
# when
# c matches $fun2( .. )
# and
# fun2 is ID of $fun2
FunDef(fun1, $fun1) :- <: $t $fun1( .. ) { .. } :>, fun1 = c_name($fun1).


Loop(s), ForLoop(s) :- s <: for ($_ ;$_ ;$_ ) $_ :>.
Loop(s), ForLoop(s) :- s <: for ($_ $_ ; $_ ) $_ :>.
Loop(s), WhileLoop(s) :- s <: while ($_) $_ :>.
Loop(s), DoWhileLoop(s) :- s <: do $_ while ($_); :>.

LoopInFunction(s, f_name) :- <: $t $f( .. ) { .. } :>,
		  f_name = c_name($f),
		  c_is_ancestor($f, s) != 0,
		  Loop(s).

# look for nested for loops
NestedLoops(s1, s2) :- Loop(s1), Loop(s2), s1 != s2, c_is_ancestor(s1, s2) != 0.

# enclosed loops are nested loops without any loop in between
NotEnclosedLoops(s1, s2) :- NestedLoops(s1, s), NestedLoops(s, s2).
EnclosedLoops(s1, s2) :- NestedLoops(s1, s2), NOT(NotEnclosedLoops(s1, s2)).

# the call and its parent loop
# AncestorOfCall(c, a)
# when
# FunCall(_, c) // c is a function call
# a is PARENT of c
# and a is not a loop
AncestorOfCall(c, a) :- FunCall(_, c), a = c_parent(c), node_to_id(a) != 0, NOT(Loop(a)).
AncestorOfCall(c, a) :- AncestorOfCall(c, t), a = c_parent(t), node_to_id(a) != 0, NOT(Loop(a)).

# l is the loop immediately enclosing the call c
LoopForCall(l, c) :- l = c_parent(t), node_to_id(l) != 0, AncestorOfCall(c, t), Loop(l).

# debugging info
LoopForCallDetail(src, ls, le, fun) :- LoopForCall(l, c), FunCall(fun, c),
		       ls = c_src_line_start(l),
		       le = c_src_line_end(l),
		       src = c_src_file(l).

# local loop depth
# a loop without an immediately enclosing loop has depth 0
LoopDepth(l, 0) :- Loop(l), NOT(EnclosedLoops(_, l)).
# a loop with an immediately enclosing loop has a depth +1 the depth of the enclosing loop
LoopDepth(l, i) :- LoopDepth(l_outer, depth_outer), EnclosedLoops(l_outer, l), i = depth_outer + 1.


NotMaxLoopDepth(l, i) :- LoopDepth(l, i), LoopDepth(l, j), GT(j, i).

# debugging info containing location
LoopDepthDetail(sl, sc, el, ec, f, d) :- LoopDepth(l, d), NOT(NotMaxLoopDepth(l, d)),
		    sl = c_src_line_start(l),
		    sc = c_src_col_start(l),
		    el = c_src_line_end(l),
		    ec = c_src_col_end(l),
		    f = c_src_file(l).

# predicate LoopDepthDetails(sl, sc, el, ec, f, d)
# where
# d is the LoopDepth of l
# and
# d is not NotMaxLoopDepth of l
# and
# (l, sl, sc, el, ec) is SRC of l

# local loop depth for calls
LocalLoopDepthForCall(c, 0) :- FunCall(_, c), NOT(LoopForCall(_, c)).
LocalLoopDepthForCall(c, i) :- LoopForCall(l, c), LoopDepth(l, j), NOT(NotMaxLoopDepth(l, j)), i = j + 1.

# compute the transitive closure of the call relation
TransitiveCall(caller_name, callee_name) :- Call(_, _, caller_name, callee_name).
TransitiveCall(caller_name, callee_name) :- TransitiveCall(caller_name, t), Call(_, _, t, callee_name).
# if a function calls itself, then it's recursive
RecursiveFunction(fun) :- TransitiveCall(fun, fun).

# The loop depth from which a function is called. Only for non-recursive functions
# There may be multiple loop depths for a function, depending on the call stack
# Functions that are not called have loop depth of 0
GlobalLoopDepthForFunction(fun_name, 0) :- FunDef(fun_name, _), NOT(FunCall(fun_name, _)), NOT(RecursiveFunction(fun_name)).

GlobalLoopDepthForFunction(callee_name, k) :- Call(caller, call_expr, caller_name, callee_name), NOT(RecursiveFunction(callee_name)),
			      GlobalLoopDepthForFunction(caller_name, i), LocalLoopDepthForCall(call_expr, j), BIND(k, i + j).

# Compute the global loop depth. Depending on call stack, there may be more than one loop depth for a function.
# The global loop depth is the loop depth for the current function + the local loop depth
GlobalLoopDepth(l, k) :- LoopInFunction(l, f_name), LoopDepth(l, i), GlobalLoopDepthForFunction(f_name, j), k = i+j.

NotMaxGlobalLoopDepth(l, n) :- GlobalLoopDepth(l, k), GlobalLoopDepth(l, n), GT(k, n).
GlobalLoopDepthDetail(src, ls, le, depth) :- GlobalLoopDepth(l, depth), NOT(NotMaxGlobalLoopDepth(l, depth)),
			   ls = c_src_line_start(l),
			   le = c_src_line_end(l),
			   src = io_relative_path(c_src_file(l)),
			   NOT(MATCH(".*include.*", src)). # exclude matches in STL headers

OUTPUT('GlobalLoopDepthDetail, "GlobalLoopDepthDetail.csv", "csv").
# OUTPUT('LoopDepthDetail, "LoopDepthDetail.csv", "csv").
# OUTPUT('RecursiveFunction, "RecursiveFunction.csv", "csv").
