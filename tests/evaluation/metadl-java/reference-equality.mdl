	   SuperClass(c, d) :- c <: class `_ extends `d { .. } :>, DECL(`d, d).
	   SuperClass(c, d) :- c <: class `_<..> extends `d { .. } :>, DECL(`d, d).

	   SuperType(c, o) :- c <: class `_ { .. } :>, NOT(SuperClass(c, _)), o <: public class Object { .. } :>.

	   SuperInterface(c, d) :- c <: class `_ implements ..,`d,.. { .. } :>, DECL(`d, d).
	   SuperInterface(c, d) :- c <: class `_<..> implements .., `d,.. { .. } :>, DECL(`d, d).

	   SuperInterface(c, d) :- c <: interface `_ extends .., `d,.. { .. } :>, DECL(`d, d).
	   SuperInterface(c, d) :- c <: interface `_<..> extends .., `d,.. { .. } :>, DECL(`d, d).

	   SuperType(t, s) :- SuperClass(t, s).
	   SuperType(t, s) :- SuperInterface(t, s).
	   # SuperType(`f, e) :- e <: enum `_ { .., `f , .. ; .. } :>, `f <: `_(..) { .. } :>.
	   # SuperType(e, t) :- e <: new `t(..) { .. } :>, DECL(`t, t).
#
           StaticMethod(m) :- m <: .. static .. `rett `name(..) ; :>.

	   MethodRet(m, name, ret) :- m <: .. `rett `name (..) ; :>,
				      DECL(`rett, ret), ID(`name, name).

	   MethodParam(m, i, t) :- m <: .. `rett `name(.., `t `_, ..) ; :>,
				      DECL(`t, t), PARENT(param, `t), INDEX(param, i).

	   MethodArity(m, n) :- MethodParam(m, n_minus_1, _), NOT(MethodParam(m, n, _)), BIND(n, n_minus_1 + 1).
	   MethodArity(m, 0) :- MethodRet(m, _, _), NOT(MethodParam(m, _, _)).

	   SameSig(m1, m2) :- MethodRet(m1, name, _), MethodRet(m2, name, _), MethodArity(m1, 0), MethodArity(m2, 0).
	   DiffParams(m1, m2) :- MethodRet(m1, name, _), MethodRet(m2, name, _), MethodParam(m1, i, t1), MethodParam(m2, i, t2), NEQ(t1, t2).

           SameSig(m1, m2) :- MethodRet(m1, name, _), MethodRet(m2, name, _), NEQ(m1, m2), MethodArity(m1, a), MethodArity(m2, a), NOT(DiffParams(m1, m2)).


	   SuperTypeT(t1, t2) :- SuperType(t1, t2).
	   SuperTypeT(t1, t2) :- SuperType(t1, t), SuperTypeT(t, t2).
	   # m1 overrides m2
	   Override(m1, m2) :- SameSig(m1, m2), PARENT(l1, m1), PARENT(c1, l1), PARENT(l2, m2), PARENT(c2, l2), SuperTypeT(c1, c2), NOT(StaticMethod(m1)),
	   		NOT(StaticMethod(m2)).

	   Override(m1, m2) :- SameSig(m1, m2), PARENT(l1, m1), PARENT(c1, l1), PARENT(l2, m2), PARENT(c2, l2), SuperTypeT(c1, c2),
	   	        NOT(StaticMethod(m1)), NOT(StaticMethod(m2)).

	   # Pattern to handle anonymous class declarations
	   Override(`m1, m2) :- e <: new `t(..) { .. `m1 .. } :>, `m1 <: .. `rett `name(..) { .. } :>, SameSig(m1, m2),
	   			       DECL(`t, t), PARENT(t, l), PARENT(l, m2).

	   # Enum constants can also override methods declared in the enum body
	   Override(`m1, `m2) :-  <: enum `_ { .. , `k { .. `m1 .. } , .. ; ..  `m2 .. } :>, SameSig(`m1, `m2).

################################################################################
	    ClassEq(c, `d) :- c <: class `_ { .. `d .. } :>, `d <: .. public .. boolean equals(`t `o) ;:>.
	    ClassEq(c, `d) :- c <: class `_ <..> { .. `d .. } :>, `d <: .. public .. boolean equals(`t `o) ;:>.

	    ClassEqDetail(l, c, file) :- ClassEq(cl, d), SRC(cl, l, c, _, _, file).
	    # OUTPUT('ClassEqDetail, "ClassEqDetail.csv", "csv").

	    # RealType - the most precise type known for the term
	    # - in case of generic type instances, this is the generic type declaration they instantiate
	    RealType(t, r) :- TYPE(t, r), NOT(GENERIC(r, _)), NOT(TypeVariableUpperBound(r, _)).
	    RealType(t, r) :- TYPE(t, r1), GENERIC(r1, r).
	    # - in case of bounded types, the upper bound of the type
	    RealType(t, u) :- TYPE(t, tv), TypeVariableUpperBound(tv, u).

	    EqualityTest(`t1, `t2) :- <: `t1 == `t2 :>.
	    EqualityTest(`t1, `t2) :- <: `t1 != `t2 :>.

	    BadEq(`t1, `t2) :- EqualityTest(`t1, `t2), RealType(`t1, t1), RealType(`t2, t2), MustUseEquals(t1), MustUseEquals(t2),
	    	       NOT(IsExcludedThis(`t1)), NOT(IsExcludedThis(`t2)).

	    DebugEq(t1, t2) :- EqualityTest(`t1, `t2), RealType(`t1, t1), RealType(`t2, t2).
	    # OUTPUT('DebugEq, "DebugEq.csv", "csv").

	    BadEqDetail(l, c, file) :- BadEq(t1, _), SRC(t1, l, c, _, _, file), GT(l, 0).
	    # OUTPUT('BadEq, "BadEq.csv", "csv").
	    OUTPUT('BadEqDetail, "BadEqDetail.csv", "csv").

	    MethodIsAbstract(m) :- m <: .. abstract .. `t `m(..) ; :>.

	    ObjectDecl(o) :- u <: Object :>, DECL(u, o).

	    # A object of type T must use equals if any supertype of T, including T, excluding Object,
	    # defines the equals method.
	    MustUseEquals(c) :- ClassEq(c, e), NOT(MethodIsAbstract(e)), NOT(ObjectDecl(c)).
	    MustUseEquals(c) :- SuperTypeT(c, s), ClassEq(s, e), NOT(ObjectDecl(s)).

	    # We're using PARENT, because in concrete grammar `t is a token, but we actually we need
	    # the type parameter node in DECL
	    TypeVariableUpperBoundLocal(t, `u) :- <: class `_ <.. ,`t extends .. & `u & .. , .. >   { .. } :>, PARENT(t, `t).
	    TypeVariableUpperBound(t, u) :- TypeVariableUpperBoundLocal(t, `u), DECL(`u, u).

	    MustUseEqualsDetail(l, c, file) :- MustUseEquals(cl), SRC(cl, l, c, _, _, file).

	    # OUTPUT('MustUseEqualsDetail, "MustUseEqualsDetail.csv", "csv").

	    # OUTPUT('ClassEq, "ClassEq.csv", "csv").
	    # OUTPUT('MustUseEquals, "MustUseEquals.csv", "csv").

	    # TSuperTypeDetail(f1, f2) :- TSuperType(s1, s2), SRC(s1, _, _, _, _, f1), SRC(s2, _, _, _, _, f2).
	    # OUTPUT('TSuperTypeDetail, "TSuperTypeDetail.csv", "csv").
	    # OUTPUT('ObjectDecl, "ObjectDecl.csv", "csv").

	    # Exclude all the comparisons with this in compareTo and equals methods
	    ExcludedMethods(`m) :- <: class `_ implements Comparable<`t> { .. `m .. } :>, `m <: public int compareTo(..) ; :>.
	    ExcludedMethods(`m) :- `m <: public boolean equals(Object `o); :>.
	    ExcludedTerms(t) :- ExcludedMethods(m), PARENT(m, t).
	    ExcludedTerms(c) :- ExcludedTerms(p), NOT(p <: `_ `_ ( .. ) ; :>), PARENT(p, c).
	    IsThis(`t) :- `t <: this :>.
	    IsExcludedThis(t) :- IsThis(t), ExcludedTerms(t).
	    # OUTPUT('IsThis, "IsThis.csv", "csv").
	    # OUTPUT('ExcludedMethods, "ExcludedMethods.csv", "csv").
	    # OUTPUT('IsExcludedThis, "IsExcludedThis.csv", "csv").
