	    GenericMethod(m, `t1, `t2, `pt) :- m <: <.., `t1, ..> `t2 `_(.. , `pt `p, ..) ; :>.
	    GenericMethodVoid(m, `t1, `t2) :-  m <: <.., `t1, ..> `t2 `_() ; :>, NOT(GenericMethod(m, _, _, _)).

	    IsTypeBound(this, `t) :- this <: `_ extends .. & `t & ..  :>.
	    IsTypeParam(`t, `t1) :- `t <: `_ < .. , `t1 , .. > :>.

	    TypeBound(t, b) :- GenericMethod(m, t, _, _), IsTypeBound(t, b).

	    T_IsTypeParam(t, t1) :- IsTypeParam(t, t1).
	    T_IsTypeParam(t, t1) :- T_IsTypeParam(t, t2), IsTypeParam(t2, t1).

	    # Type qualifies parameter
	    TypeForParam(`t1) :- GenericMethod(m, `t1, `t2, `pt), DECL(`pt, `t1).
	    TypeForParam(`t1) :- GenericMethod(m, `t1, `t2, `pt), IsTypeParam(`pt, t), DECL(t, `t1).

	    GenericMethod3(m, t1, t2) :- GenericMethod(m, t1, t2, _).
	    GenericMethod3(m, t1, t2) :- GenericMethodVoid(m, t1, t2).
	    # < T, U extends T>
	    TypeForTypeBound(t1) :- GenericMethod3(m, t1, _), GenericMethod3(m, t2, _), IsTypeBound(t2, b), DECL(b, t1).
	    # <T, U extends<V<T>>
	    TypeForTypeBound(t1) :- GenericMethod3(m, t1, _), GenericMethod3(m, t2, _), IsTypeBound(t2, b), T_IsTypeParam(b, tp), DECL(tp, t1).

	    # Type used to build the return type
	    TypeForReturn(t1) :- GenericMethod3(m, t1, r), T_IsTypeParam(r, p), DECL(p, t1).


	    TypeUnusedInFormals(t1) :- GenericMethod(m, t1, r, _), NOT(TypeForParam(t1)), NOT(TypeForTypeBound(t1)), NOT(TypeForReturn(t1)).
	    TypeUnusedInFormals(t1) :- GenericMethodVoid(m, t1, r), NOT(TypeForTypeBound(t1)), NOT(TypeForReturn(t1)).

	    TypeUnusedInFormalsDetail(l, c, file) :- TypeUnusedInFormals(t), SRC(t, l, c, _, _, file), GT(l, 0).


OUTPUT('TypeUnusedInFormalsDetail, "TypeUnusedInFormalsDetail.csv", "csv").