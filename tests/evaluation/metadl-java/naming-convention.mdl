

	    NotLibrary(n) :- SRC(n, l, _, _, _, _), NEQ(l, 0).

	    Decl(`d), Type(c, name) :- c <: class `name { .. `d .. } :>, ID(`name, name).
	    Decl(`d), Type(e, name) :- e <: enum `name { .. ,`d, .. ; .. } :>, ID(`name, name).
	    Decl(`d), Type(i, name) :- i <: interface `name { .. `d .. } :>, ID(`name, name).

	    # Type names should start with uppercase
	    WarningTypeName(l, c, file, name) :- Type(t, name), NOT(MATCH("[A-Z].*", name)), SRC(t, l, c, _, _, file), NotLibrary(t).

	    Field(`f, name) :- Decl(d), d <: .. `t .. , `f , .. ; :>, ID(`f, name), NotLibrary(d).
	    FinalField(`f) :- Decl(d), d <: .. final .. `t .. , `f, .. ; :>.
	    Method(d, name) :- Decl(d), d <: `t `m ( .. ) ; :>, ID(`m, name), NotLibrary(d).

	    AllowedStaticField(`f) :- Field(`f, name), <: .. static .. `_ .. , `f, .. ; :> , MATCH("[_0-9A-Z]*", name).
	    WarningFieldName(l, c, file, name) :- Field(f, name), NOT(FinalField(f)),
			NOT(AllowedStaticField(f)), NOT(MATCH("[a-z].*", name)), SRC(f, l, c, _, _, file).
	    WarningMethodName(l, c, file, name) :- Method(m, name), NOT(MATCH("[a-z].*", name)), SRC(m, l, c, _, _, file).



OUTPUT('WarningTypeName, "WarningTypeName.csv", "csv").
OUTPUT('WarningFieldName, "WarningFieldName.csv", "csv").
OUTPUT('WarningMethodName, "WarningMethodName.csv", "csv").