### Analysis
	    FieldInClass(c, `t, `f, `m) :- c <: class `_ { .. .. `m .. `t .. , `f , .. ; .. } :>, NOT(FundamentalTypeUse(`t)),
	                                   SRC(c, l, col, _,_,_), NEQ(col, 0).
	    FieldInClass(c, `t, `f, `m) :- c <: enum `_ { .. ; .. .. `m .. `t .. , `f , .. ; .. } :>,
	                                   NOT(FundamentalTypeUse(`t)),
	                                   SRC(c, l, col, _,_,_), NEQ(col, 0).

	    Field(f) :- FieldInClass(_, _, f, _).

	    FundamentalTypeUse(t) :- t <: int :>.
	    FundamentalTypeUse(t) :- t <: char :>.
	    FundamentalTypeUse(t) :- t <: byte :>.
	    FundamentalTypeUse(t) :- t <: long :>.
	    FundamentalTypeUse(t) :- t <: short :>.
	    FundamentalTypeUse(t) :- t <: float :>.
	    FundamentalTypeUse(t) :- t <: double :>.
	    FundamentalTypeUse(t) :- t <: boolean :>.


	    IsPublic(f) :- FieldInClass(_, _, f, m), MOD(m, "public").
	    IsFinal(f) :- FieldInClass(_, _, f, m), MOD(m, "final").

	    NonPublicFieldReturn(s, f) :- s <: return `f ; :>, DECL(`f, f), FieldInClass(_, _, f, m), NOT(IsPublic(f)), NOT(IsFinal(f)).
	    NonPublicFieldReturn(s, f) :- s <: return this.`f; :>, DECL(`f, f), FieldInClass(_, _, f, m), NOT(IsPublic(f)), NOT(IsFinal(f)).
	    NonPublicFieldReturnDetail(l, c, file) :- NonPublicFieldReturn(s, _), SRC(s, l, c, _, _, file).

	    # This matches only constructors
	    # IsConstructor(m) :- m <: `_ (..) { .. } :>.

	    # The patterns below can match both a constructor and a method
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: `v = `p2 :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: `v = `p2 :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: `v = `_ ? `_ : `p2  :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: `v = `_ ? `p2 : `_  :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: this.`v = `p2 :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: this.`v = `p2 :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: this.`v = `_ ? `_ : `p2  :>, DECL(`p2, `p).
	    ParamToVariable(m, `p, `v) :- m <: .. `_ `_(.., `p, ..) { .. } :>, NOT(IsConstructor(m)), <: this.`v = `_ ? `p2 : `_  :>, DECL(`p2, `p).


	    ParamToNonPublicField(m) :- ParamToVariable(m, p, v), DECL(v, f), FieldInClass(_, _, f, _), NOT(IsPublic(f)), NOT(IsFinal(f)).
	    ParamToNonPublicFieldDetail(l, c, file) :- ParamToNonPublicField(m), SRC(m, l, c, _, _, file).

### Test
	    Expect_EI_EXPOSE_REP(m) :- m <: .. @ExpectWarning("EI_EXPOSE_REP") ..  `_ `_ (..) { .. } :>.
	    Expect_EI_EXPOSE_REP(m) :- m <: .. @ExpectWarning("MS_EXPOSE_REP") ..  `_ `_ (..) { .. } :>.

	    Expect_EI_EXPOSE_REP2(m) :- m <: .. @ExpectWarning("EI_EXPOSE_REP2") ..  `_ `_ (..) { .. } :>.
	    Expect_EI_EXPOSE_REP2(m) :- m <: .. @ExpectWarning("EI_EXPOSE_STATIC_REP2") ..  `_ `_ (..) { .. } :>.
	    Expect_EI_EXPOSE_REP2(m) :- m <: .. @ExpectWarning("EI2") ..  `_ `_ (..) { .. } :>.
	    Expect_EI_EXPOSE_REP2(m) :- m <: .. @DesireWarning("EI2") ..  `_ `_ (..) { .. } :>.

	    ParentT(n, c) :- PARENT(n, c).
	    ParentT(n, c) :- ParentT(n, t), PARENT(t, c).

	    HasPublicFieldReturn(m) :- m <: .. `_ `_ (..) { .. } :>, ParentT(m, s), NonPublicFieldReturn(s, _).

	    Mismatch(m) :- Expect_EI_EXPOSE_REP(m), NOT(HasPublicFieldReturn(m)).
	    Mismatch(m) :- HasPublicFieldReturn(m), NOT(Expect_EI_EXPOSE_REP(m)).

	    Mismatch(m) :- ParamToNonPublicField(m), NOT(Expect_EI_EXPOSE_REP2(m)).
	    Mismatch(m) :- Expect_EI_EXPOSE_REP2(m), NOT(ParamToNonPublicField(m)).
	    MismatchDetail(l, c, file) :- Mismatch(m), SRC(m, l, c, _, _, file).

	    Result("pass") :- NOT(Mismatch(_)).
	    Result("fail") :- Mismatch(_).


OUTPUT('MismatchDetail, "MismatchDetail.csv", "csv").
OUTPUT('Result, "Result.csv", "csv").
OUTPUT('ParamToNonPublicFieldDetail, "ParamToNonPublicFieldDetail.csv", "csv").
OUTPUT('NonPublicFieldReturnDetail, "NonPublicFieldReturnDetail.csv", "csv").