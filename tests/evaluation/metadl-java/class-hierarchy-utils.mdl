SuperClass(c, d) :- c <: class `_ extends `d { .. } :>, DECL(`d, d).
SuperClass(c, d) :- c <: class `_<..> extends `d { .. } :>, DECL(`d, d).

SuperType(c, o) :- c <: class `_ { .. } :>, NOT(SuperClass(c, _)), o <: public class Object { .. } :>.

SuperInterface(c, d) :- c <: class `_ implements ..,`d,.. { .. } :>, DECL(`d, d).
SuperInterface(c, d) :- c <: class `_<..> implements .., `d,.. { .. } :>, DECL(`d, d).

SuperInterface(c, d) :- c <: interface `_ extends .., `d,.. { .. } :>, DECL(`d, d).
SuperInterface(c, d) :- c <: interface `_<..> extends .., `d,.. { .. } :>, DECL(`d, d).

SuperType(t, s) :- SuperClass(t, s).
SuperType(t, s) :- SuperInterface(t, s).
# SuperType(`f, e) :- e <: enum `_ { .., `f , .. ; .. } :>, `f <: `_(..) { .. } :>.
# SuperType(e, t) :- e <: new `t(..) { .. } :>, DECL(`t, t).
#
StaticMethod(m) :- m <: .. static .. `rett `name(..) ; :>.

MethodRet(m, name, ret) :- m <: .. `rett `name (..) ; :>,
DECL(`rett, ret), ID(`name, name).

MethodParam(m, i, t) :- m <: .. `rett `name(.., `t `_, ..) ; :>,
DECL(`t, t), PARENT(param, `t), INDEX(param, i).

MethodArity(m, n) :- MethodParam(m, n_minus_1, _), NOT(MethodParam(m, n, _)), BIND(n, n_minus_1 + 1).
MethodArity(m, 0) :- MethodRet(m, _, _), NOT(MethodParam(m, _, _)).

SameSig(m1, m2) :- MethodRet(m1, name, _), MethodRet(m2, name, _), MethodArity(m1, 0), MethodArity(m2, 0).
DiffParams(m1, m2) :- MethodRet(m1, name, _), MethodRet(m2, name, _), MethodParam(m1, i, t1), MethodParam(m2, i, t2), NEQ(t1, t2).

SameSig(m1, m2) :- MethodRet(m1, name, _), MethodRet(m2, name, _), NEQ(m1, m2), MethodArity(m1, a), MethodArity(m2, a), NOT(DiffParams(m1, m2)).


SuperTypeT(t1, t2) :- SuperType(t1, t2).
SuperTypeT(t1, t2) :- SuperType(t1, t), SuperTypeT(t, t2).
# m1 overrides m2
Override(m1, m2) :- SameSig(m1, m2), PARENT(l1, m1), PARENT(c1, l1), PARENT(l2, m2), PARENT(c2, l2), SuperTypeT(c1, c2), NOT(StaticMethod(m1)),
NOT(StaticMethod(m2)).

Override(m1, m2) :- SameSig(m1, m2), PARENT(l1, m1), PARENT(c1, l1), PARENT(l2, m2), PARENT(c2, l2), SuperTypeT(c1, c2),
NOT(StaticMethod(m1)), NOT(StaticMethod(m2)).

# Pattern to handle anonymous class declarations
Override(`m1, m2) :- e <: new `t(..) { .. `m1 .. } :>, `m1 <: .. `rett `name(..) { .. } :>, SameSig(m1, m2),
DECL(`t, t), PARENT(t, l), PARENT(l, m2).

# Enum constants can also override methods declared in the enum body
Override(`m1, `m2) :-  <: enum `_ { .. , `k { .. `m1 .. } , .. ; ..  `m2 .. } :>, SameSig(`m1, `m2).


# AnonymousOverrideDetail(ckind, dkind, cl, cf, dl, df) :-
# 			   AnonymousOverride(c, d),
# 	   		   AST(ckind, c, _, _, _),
# 			   AST(dkind, d, _, _, _),
# 			   SRC(c, cl, _, _, _, cf),
# 			   SRC(d, dl, _, _, _, df).

# OUTPUT('AnonymousOverrideDetail, "AnonymousOverrideDetail.csv", "csv").


# OUTPUT('SuperInterface, "SuperInterface.csv", "csv").
# OUTPUT('SuperTypeDetail, "SuperTypeDetail.csv", "csv").

# SuperTypeDetail(ckind, dkind, cl, cf, dl, df) :-
# 			   SuperType(c, d),
# 	   		   AST(ckind, c, _, _, _),
# 			   AST(dkind, d, _, _, _),
# 			   SRC(c, cl, _, _, _, cf),
# 			   SRC(d, dl, _, _, _, df).

OverrideDetail(ckind, dkind, cl, cf, dl, df) :-
Override(c, d),
AST(ckind, c, _, _, _),
AST(dkind, d, _, _, _),
SRC(c, cl, _, _, _, cf),
SRC(d, dl, _, _, _, df),
GT(cl, 0), GT(dl, 0).


OUTPUT('OverrideDetail, "OverrideDetail.csv", "csv").

# SameSigDetail(ckind, dkind, cl, cf, dl, df) :-
# 			   SameSig(c, d),
# 	   		   AST(ckind, c, _, _, _),
# 			   AST(dkind, d, _, _, _),
# 			   SRC(c, cl, _, _, _, cf),
# 			   SRC(d, dl, _, _, _, df).


#  OUTPUT('SameSigDetail, "SameSigDetail.csv", "csv").
