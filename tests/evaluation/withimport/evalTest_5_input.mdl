# An incomplete type check/inference  for DatalogM

IMPORT( 'Program1, "./tests/evaluation/withimport/evalTest_1.in", "metadl").

# For the purpose of type inference, provide a clauses that contain ground instances of all the predicates.
Program(0, 0, 0),
Child(0, 0, 0),
Rule(0, 0, 0),
Fact(0, 0, 0),
Atom1(0, 0, 0),
PredicateSymbol(0, ""),
IntConstant(0, 0),
StringConstant(0, ""),
PredicateRef(0, 'PredicateRef),
Variable(0, ""),
IMPORTLiteral(0, 0, 0),
EDBLiteral(0, 0, 0),
OUTPUTLiteral(0, 0, 0),
NEGLiteral(0, 0, 0),
BINDLiteral(0, 0, 0),
BinaryExclusiveTermLiteralRef(0, "", 0, 0),
Functor(0, 0, 0),
FunctorSymbol(0, "") :- NEQ(0, 0).


Program1(0, 0, 0,
0, 0, 0,
0, 0, 0,
0, 0, 0,
10, 0, 0,
0, "",
0, 0,
0, "",
0, 'PredicateRef,
0, "",
0, 0, 0,
0, 0, 0,
0, 0, 0,
0, 0, 0,
0, 0, 0,
0, "", 0, 0,
0, 0, 0, 0, "") :- NEQ(0,0).



ProgramX(p0, p1, p2),
ChildX(p3, p4, p5),
RuleX(p6, p7, p8),
FactX(p9, p10, p11),
Atom1X(p12, p13, p14),
PredicateSymbolX(p15, p16),
IntConstantX(p17, p18),
StringConstantX(p19, p20),
PredicateRefX(p21, p22),
VariableX(p23, p24),
IMPORTLiteralX(p25, p26, p27),
EDBLiteralX(p28, p29, p30),
OUTPUTLiteralX(p31, p32, p33),
NEGLiteralX(p34, p35, p36),
BINDLiteralX(p37, p38, p39),
BinaryExclusiveTermLiteralRefX(p40, p41, p42, p43),
FunctorX(p44, p45, p46),
FunctorSymbolX(p47, p48) :-
		Program1(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9,
		p10, p11, p12, p13,  p14, p15, p16, p17, p18, p19,
		p20, p21, p22, p23, p24, p25, p26, p27, p28, p29,
		p30, p31, p32, p33, p34, p35, p36, p37, p38, p39,
		p40, p41, p42, p43, p44, p45, p46, p47, p48).

Program(p0, p1, p2) :-                                      ProgramX(p0, p1, p2), GT(p0, 0).
Child(p3, p4, p5) :-					    ChildX(p3, p4, p5), GT(p3, 0).
Rule(p6, p7, p8) :-					    RuleX(p6, p7, p8), GT(p6, 0).
Fact(p9, p10, p11) :-					    FactX(p9, p10, p11), GT(p9, 0).
Atom1(p12, p13, p14) :-					    Atom1X(p12, p13, p14), GT(p12, 0).
PredicateSymbol(p15, p16) :-				    PredicateSymbolX(p15, p16), GT(p15, 0).
IntConstant(p17, p18) :-				    IntConstantX(p17, p18), GT(p17, 0).
StringConstant(p19, p20) :-				    StringConstantX(p19, p20), GT(p19, 0).
PredicateRef(p21, p22) :-				    PredicateRefX(p21, p22), GT(p21, 0).
Variable(p23, p24) :-					    VariableX(p23, p24), GT(p23, 0).
IMPORTLiteral(p25, p26, p27) :-				    IMPORTLiteralX(p25, p26, p27), GT(p25, 0).
EDBLiteral(p28, p29, p30) :-				    EDBLiteralX(p28, p29, p30), GT(p28, 0).
OUTPUTLiteral(p31, p32, p33) :-				    OUTPUTLiteralX(p31, p32, p33), GT(p31, 0).
NEGLiteral(p34, p35, p36) :-				    NEGLiteralX(p34, p35, p36), GT(p34, 0).
BINDLiteral(p37, p38, p39) :-				    BINDLiteralX(p37, p38, p39), GT(p37, 0).
BinaryExclusiveTermLiteralRef(p40, p41, p42, p43) :-	    BinaryExclusiveTermLiteralRefX(p40, p41, p42, p43), GT(p40, 0).
Functor(p44, p45, p46) :-				    FunctorX(p44, p45, p46), GT(p44, 0).
FunctorSymbol(p47, p48) :-				    FunctorSymbolX(p47, p48), GT(p47, 0).



Body(rule_id, i, atom_id) :- Rule(rule_id, 1, l_id),Child(l_id, i, atom_id).
Head(rule_id, i, atom_id) :- Rule(rule_id, 0, l_id),Child(l_id, i, atom_id).

Constant(x) :- IntConstant(x, y).
Constant(x) :- StringConstant(x, y).
Constant(x) :- PredicateRef(x, y).


Atom(a, 0, p) :- Atom1(a, 0, p).
Atom(a, i, t) :- Atom1(a, 1, j),Child(j, k, t),BIND(i, k+1).

SameVar(v1, v2) :-
			Body(rule_id, x, atom_id1),
			Body(rule_id, y, atom_id2),
			Atom(atom_id1, idx1, v1),
			Atom(atom_id2, idx2, v2),
			Variable(v1, name),Variable(v2, name).

SameVar(v1, v2) :-
			Head(rule_id, x, atom_id1),Atom(atom_id1, idx1, v1),
			Body(rule_id, y, atom_id2),Atom(atom_id2, idx2, v2),
			Variable(v1, name),Variable(v2, name).

SameVar(v1, v2) :-
			Head(rule_id, x, atom_id1),Atom(atom_id1, idx1, v1),
			Head(rule_id, y, atom_id2),Atom(atom_id2, idx2, v2),
			Variable(v1, name),Variable(v2, name).

# Transitivity
SameVar(v1, v3) :- SameVar(v1, v2), SameVar(v2, v3).
# Symmetry
SameVar(v1, v2) :- SameVar(v2, v1).
# Reflexivity
SameVar(v1, v1) :- Variable(v1, x).

SamePred(p1, p2) :- PredicateSymbol(p1, name), PredicateSymbol(p2, name).

# PredType(pred_id, term_index, term_type)
# Infer types from constants
PredType(p, idx, t) :- Atom(a, 0, p), Atom(a, idx, node_id), CType(node_id, t).
# Infer types from variables
PredType(p, idx1, t) :-
			SameVar(v1, v2),
			Atom(atom_id1, idx1, v1),
			Atom(atom_id2, idx2, v2),
			Atom(atom_id2, 0, q),
			PredType(q, idx2, t),
			Atom(atom_id1, 0, p).

PredType(p, idx, t) :- PredType(q, idx, t), SamePred(p, q).

PredTypeName(pname, idx, t) :- PredType(p, idx, t),PredicateSymbol(p, pname).

# The indices of all the terms in a predicate
TermIndex(p, idx) :-
			 Atom(a, 0, p),
			 Atom(a, idx, q),
			 PredicateSymbol(p, y),
			 Variable(q, x).

TermIndex(p, idx) :-
			 Atom(a, 0, p),
			 Atom(a, idx, q),
			 PredicateSymbol(p, y),
			 Constant(q).

IsType("String").
IsType("Int").
IsType("PredicateRef").

FullTyped(p, idx) :- PredType(p, idx, x).
NotFullyTyped(p, idx) :- TermIndex(p, idx), NOT(FullTyped(p, idx)).
InconsistentTyped(p, idx, t1, t2) :- PredType(p, idx, t1), PredType(p, idx, t2), NEQ(t1, t2).

NotFullyTypedName(pname, idx) :- NotFullyTyped(p, idx), PredicateSymbol(p, pname).
InconsistentTypedName(pname, idx, tname1, tname2) :- InconsistentTyped(p, idx, tname1, tname2), PredicateSymbol(p, pname).

# Types for constants
CType(node_id, "String") :- StringConstant(node_id, x).
CType(node_id, "Int") :- IntConstant(node_id, x).
CType(node_id, "PredicateRef") :- PredicateRef(node_id, x).

# TODO: type check NEQ and NOT

# For a well-typed program, these relations should be empty
OUTPUT('NotFullyTypedName).
OUTPUT('InconsistentTypedName).
OUTPUT('PredTypeName).
